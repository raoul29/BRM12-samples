  {{- $outer := . -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: charging-settings-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
data:
  charging-settings.xml: |
    <?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
    <config>
        <charging>
            <clusters
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.cluster.ClusterConfigurations">
                <clusterConfigurationList config-class="java.util.ArrayList">
                    {{ range $key, $cluster := split " " (include "allclusters" .) }}
                    <clusterConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.cluster.ClusterConfiguration"
                            name={{ $cluster | quote}}
                            id={{ (trimPrefix "_" $key) | quote }}/>
                    {{ end }}
                </clusterConfigurationList>
            </clusters>

            <server config-class="oracle.communication.brm.charging.appconfiguration.beans.BizParamConfig"
                    aopEnabled={{ .Values.charging.server.aopEnabled | quote}}
                    aopVariance={{ .Values.charging.server.aopVariance | quote}}
                    degradedModeThreshold={{ .Values.charging.server.degradedModeThreshold | quote}}
                    reverseRateUseAllBalances={{ .Values.charging.server.reverseRateUseAllBalances | quote}}
                    debitRefundSessionEvictionSize={{ .Values.charging.server.debitRefundSessionEvictionSize | quote}}
                    currencyScale={{ .Values.charging.server.currencyScale | quote}}
                    currencyRoundingMode={{ .Values.charging.server.currencyRoundingMode | quote}}
                    nonCurrencyScale={{ .Values.charging.server.nonCurrencyScale | quote}}
                    nonCurrencyRoundingMode={{ .Values.charging.server.nonCurrencyRoundingMode | quote}}
                    nonLinearRatingEnabled={{ .Values.charging.server.nonLinearRatingEnabled | quote}}
                    tariffTimeChangeSupported={{ .Values.charging.server.tariffTimeChangeSupported | quote}}
                    systemConsumptionRule={{ .Values.charging.server.systemConsumptionRule | quote}}
                    thresholdBreachNotificationMode={{ .Values.charging.server.thresholdBreachNotificationMode | quote}}
                    accountingOnOffMode={{ .Values.charging.server.accountingOnOffMode | quote}}
                    offerEligibilitySelectionMode={{ .Values.charging.server.offerEligibilitySelectionMode | quote}}
                    alignRecurringImpactsToOffer={{ .Values.charging.server.alignRecurringImpactsToOffer | quote}}
                    sharingRetryCount = {{ .Values.charging.server.sharingRetryCount | quote}}
                    remainingBalanceCalcMode={{ .Values.charging.server.remainingBalanceCalcMode | quote}}
                    virtualTime={{ .Values.charging.server.virtualTime | quote}}
                    virtualTimeMode={{ .Values.charging.server.virtualTimeMode | quote}}
                    concurrentRatedEventFederatedSleepTime={{ .Values.charging.server.concurrentRatedEventFederatedSleepTime | quote}}
                    systemCurrencyNumericCode={{ .Values.charging.server.systemCurrencyNumericCode | quote}}
                    treatNoRatingGraphAsError={{ .Values.charging.server.treatNoRatingGraphAsError | quote}}
                    matchFactorEnabled={{ .Values.charging.server.matchFactorEnabled | quote}}
                    skipCreditFloorBreachCheck={{ .Values.charging.server.skipCreditFloorBreachCheck | quote}}
                    rateZeroQuantity={{ .Values.charging.server.rateZeroQuantity | quote}}
                    groupNotificationEnabled={{ .Values.charging.server.groupNotificationEnabled | quote}}
                    brmPostCommitEnabled={{ .Values.charging.server.brmPostCommitEnabled | quote}}
                    updateRequestServerTimeout={{ .Values.charging.server.updateRequestServerTimeout | quote}}
                    failBalanceUpdatesOnCreditCeilingBreach={{ .Values.charging.server.failBalanceUpdatesOnCreditCeilingBreach | quote}}
                    asoCleanupOperationList={{ .Values.charging.server.asoCleanupOperationList | quote}}
                    kafkaEnabledForNotifications={{ .Values.charging.server.kafkaEnabledForNotifications | quote}}
                    enableFuiForMemberUponSharerBalanceBreach="false"
                    terminatedSessionHistoryCacheEnabled={{ .Values.charging.server.terminatedSessionHistoryCacheEnabled | quote}}
                    supportOriginalBeat={{ .Values.charging.server.supportOriginalBeat | quote}}
                    walletReadRetryInterval={{ .Values.charging.server.walletReadRetryInterval | quote}}
                    walletReadRetryCount={{ .Values.charging.server.walletReadRetryCount | quote}}
                    useOfferPriorityDuringAlterationAgreementEvaluation={{ .Values.charging.server.useOfferPriorityDuringAlterationAgreementEvaluation | quote}}
                    debitSessionCheckDisabled={{ .Values.charging.server.debitSessionCheckDisabled | quote}}
                    randomizationIntervalForUsageValidity={{ .Values.charging.server.randomizationIntervalForUsageValidity | quote}}
                    populateCurrentLoanAmountsOnRef={{ .Values.charging.server.populateCurrentLoanAmountsOnRef | quote}}>
            </server>

            <!-- Configurable settings for rated event publisher
                name -> the ECE cluster name
                noSQLConnectionName -> the NoSQL connection name
                threadPoolSize -> the number of threads in thread pool
            -->
            <ratedEventPublishers
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.ratedeventpublisher.RatedEventPublisherConfigurations">
                <ratedEventPublisherConfigurationList config-class="java.util.ArrayList">
                    {{ range $key, $value := .Values.charging.ratedEventPublishers }}
                    <ratedEventPublisherConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.ratedeventpublisher.RatedEventPublisherConfig"
                            name={{ $value.clusterName | quote}}
                            noSQLConnectionName={{ $value.noSQLConnectionName | quote}}
                            threadPoolSize={{ $value.threadPoolSize | quote}}/>
                    {{ end }}
                </ratedEventPublisherConfigurationList>
            </ratedEventPublishers>

            <!-- Configurable settings for simple file based rated event publisher
                targetFileDirectory -> directory to store persistence file
            -->
            <simpleFileBasedRatedEventPublisher
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.ratedeventpublisher.SimpleFileBasedRatedEventPublisherConfig"
                    targetFileDirectory={{ .Values.charging.simpleFileBasedRatedEventPublisher.targetFileDirectory | quote}}>
            </simpleFileBasedRatedEventPublisher>

            <!-- Configurable settings for usage processor error handler
                maxNumberSystemExceptionsWithDetailedLoggingPerSecond -> Limit for number of system exceptions logged with detail in a second
                maxNumberSystemExceptionsWithDetailedLoggingPerMinute -> Limit for number of system exceptions logged with detail in a minute
                maxNumberSystemExceptionsWithDetailedLoggingPerHour -> Limit for number of system exceptions logged with detail in an hour
            -->
            <errorHandler
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.errorhandler.ErrorHandlerConfig"
                    maxNumberSystemExceptionsWithDetailedLoggingPerSecond={{ .Values.charging.errorHandler.maxNumberSystemExceptionsWithDetailedLoggingPerSecond | quote}}
                    maxNumberSystemExceptionsWithDetailedLoggingPerMinute={{ .Values.charging.errorHandler.maxNumberSystemExceptionsWithDetailedLoggingPerMinute | quote}}
                    maxNumberSystemExceptionsWithDetailedLoggingPerHour={{ .Values.charging.errorHandler.maxNumberSystemExceptionsWithDetailedLoggingPerHour | quote}}>
            </errorHandler>

            <!-- Configure notification types for various service events. Allowed values are
                NONE -> No notification should be sent
                ASYNCHRONOUS -> Asynchronous notification will be sent
                PIGGYBACK -> Events are piggy backed on the response
                ASYNC_PIGGYBACK -> Both Asynchronous and piggyback notifications will be sent
                -->
            <notification config-class="oracle.communication.brm.charging.appconfiguration.beans.notification.NotificationConfig"
                    creditCeilingBreachNotificationMode={{ .Values.charging.notification.creditCeilingBreachNotificationMode | quote}}
                    creditFloorBreachNotificationMode={{ .Values.charging.notification.creditFloorBreachNotificationMode | quote}}
                    thresholdBreachNotificationMode={{ .Values.charging.notification.thresholdBreachNotificationMode | quote}}
                    topUpNotificationMode={{ .Values.charging.notification.topUpNotificationMode | quote}}
                    rarNotificationMode={{ .Values.charging.notification.rarNotificationMode | quote}}
                    externalTopUpNotificationMode={{ .Values.charging.notification.externalTopUpNotificationMode | quote}}
                    billingNotificationMode={{ .Values.charging.notification.billingNotificationMode | quote}}
                    adviceOfChargeNotificationMode={{ .Values.charging.notification.adviceOfChargeNotificationMode | quote}}
                    replenishPoidIdNotificationMode={{ .Values.charging.notification.replenishPoidIdNotificationMode | quote}}
                    lifeCycleTransitionNotificationMode={{ .Values.charging.notification.lifeCycleTransitionNotificationMode | quote}}
                    firstUsageValidityInitNotificationMode={{ .Values.charging.notification.firstUsageValidityInitNotificationMode | quote}}
                    offeringUsageValidityInitNotificationMode={{ .Values.charging.notification.offeringUsageValidityInitNotificationMode | quote}}
                    spendingLimitNotificationMode={{ .Values.charging.notification.spendingLimitNotificationMode | quote}}
                    aggregatedSpendingLimitNotificationMode={{ .Values.charging.notification.aggregatedSpendingLimitNotificationMode | quote}}
                    subscriberPreferenceUpdateNotificationMode={{ .Values.charging.notification.subscriberPreferenceUpdateNotificationMode | quote}}
                    rerateJobCreateNotificationMode={{ .Values.charging.notification.rerateJobCreateNotificationMode | quote}}
                    customEventNotificationMode={{ .Values.charging.notification.customEventNotificationMode | quote}}
                    enrichBalanceQueryResponseMode={{ .Values.charging.notification.enrichBalanceQueryResponseMode | quote}}
                    loanGrantNotificationMode={{ .Values.charging.notification.loanGrantNotificationMode | quote}}
                    subscriptionCycleForwardMode={{ .Values.charging.notification.subscriptionCycleForwardMode | quote}}>
                <!-- Enriches notification messages
                    Enrichment is supported for subscriber preferences(name is subscriberPreferences) only.
                    e.g enrichValue="" to not enrich any subscriber preferences. This is default for ECE.
                    e.g enrichValue="Language" to enrich "Language";
                    e.g enrichValue="Language,Channel" to enrich both "Language" and "Channel";
                    e.g enrichValue="ALL" will load all subscriber preferences.-->
                <notificationEnrichmentConfigList config-class="java.util.ArrayList">
                    <notificationEnrichmentConfig
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.notification.NotificationEnrichmentConfig"
                            enrichName={{ .Values.charging.notification.notificationEnrichmentConfigList.enrichName | quote}}
                            enrichValue={{ .Values.charging.notification.notificationEnrichmentConfigList.enrichValue | quote}}>
                    </notificationEnrichmentConfig>
                </notificationEnrichmentConfigList>
            </notification>

            <!-- Configure the alternate peer for each peer connected to the diameter gateway
            -->
            <diameterGatewayPeerConfigurations
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.diametergateway.DiameterGatewayPeerConfigurations">
                <diameterGatewayPeerConfigurationGroup config-class="java.util.ArrayList">
                    {{ range $key, $peer := .Values.charging.diameterGatewayPeerConfigurations }}
                    <diameterGatewayPeerConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.diametergateway.DiameterGatewayPeerConfiguration"
                            peerName={{ $peer.peerName | quote }}>
                        <diameterGatewayAlternatePeerConfigurationGroup config-class="java.util.ArrayList">
                            {{ range $key, $alternatepeer := $peer.diameterGatewayAlternatePeerConfigurations }}
                            <diameterGatewayAlternatePeerConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.diametergateway.DiameterGatewayAlternatePeerConfiguration"
                                    alternatePeerName={{ $alternatepeer.alternatePeerName | quote }}>
                            </diameterGatewayAlternatePeerConfiguration>
                            {{ end }}
                        </diameterGatewayAlternatePeerConfigurationGroup>
                    </diameterGatewayPeerConfiguration>
                    {{ end }}
                </diameterGatewayPeerConfigurationGroup>
            </diameterGatewayPeerConfigurations>

            <reservationConfig
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.reservation.ReservationConfig"
                    previousPayloadCopyEnabled="true"
                    validityTime="3600"
                    reservationDuration="3600">
                <productConfigurationGroup config-class="java.util.ArrayList">
                    <productConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.reservation.ProductConfiguration"
                            type="TestProduct" connectionTimeEnabled="false"> <!--  {true} if you want to consider connection time instead of default session start time-->
                        <rumConfigurationGroup config-class="java.util.ArrayList">
                            <rumConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.reservation.RumConfiguration"
                                    rum="TestRum" minAuthorizedQuota="1.0" initialQuota="100.0" incrementalQuota="50.0"
                                    unit="Seconds"/>
                        </rumConfigurationGroup>
                    </productConfiguration>
                </productConfigurationGroup>
            </reservationConfig>

            <lifecycleStateMappingConfiguration
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleStateMapper">
                <lifecycleStateMappingGroup config-class="java.util.ArrayList">
                    <lifecycleState
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleState"
                            state="101" stateName="PREACTIVE"/>
                    <lifecycleState
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleState"
                            state="102" stateName="ACTIVE"/>
                    <lifecycleState
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleState"
                            state="103" stateName="RECHARGE_ONLY"/>
                    <lifecycleState
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleState"
                            state="104" stateName="CREDIT_EXPIRED"/>
                    <lifecycleState
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleState"
                            state="105" stateName="DORMANT"/>
                    <lifecycleState
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleState"
                            state="106" stateName="FRAUD_INVESTIGATED"/>
                    <lifecycleState
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleState"
                            state="107" stateName="SUSPENDED"/>
                    <lifecycleState
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleState"
                            state="108" stateName="CLOSED"/>
                    <!--Following status will be set if SLM is disabled in BRM -->
                    <lifecycleState
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleState"
                            state="10100" stateName="ACTIVE"/>
                    <lifecycleState
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleState"
                            state="10102" stateName="SUSPENDED"/>
                    <lifecycleState
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.productstate.LifecycleState"
                            state="10103" stateName="CLOSED"/>
                </lifecycleStateMappingGroup>
            </lifecycleStateMappingConfiguration>

            <!--
                The transitionConfiguration for life cycle state transition can also be based on the business profile of the customer.
                Example 1 : (business_profile([name:"PREPAID"])}  == "true" )
                The above condition will imply that the state transition will take place only for PREPAID profile and can be used in
                the transition as shown below
                <transitionConfiguration config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.TransitionConfiguration"
                transition="(((@productState == "PREACTIVE") && (@usageDirection == "0")) && ({business_profile([name:"PREPAID"])}  == "true"))
                => [state:"ACTIVE",expiration:"2",duration:"days"]"/>
                Example 2 : (business_profile([name:"POSTPAID"])}  == "true" )
                The above condition will imply that the state transition will take place only for POSTPAID profile and can be used in
                the transition as shown below
                <transitionConfiguration config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.TransitionConfiguration"
                transition="(((@productState == "PREACTIVE") && (@usageDirection == "0")) && ({business_profile([name:"POSTPAID"])}  == "true"))
                 => [state:"ACTIVE",expiration:"2",duration:"days"]"/>
            -->
            <lifecycleConfiguration
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.LifecycleConfiguration"
                    lifecycleEnabled="false">
                <productConfigurationGroup config-class="java.util.ArrayList">
                    <productLifecycleConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.ProductLifecycleConfiguration"
                            productType="VOICE">
                        <ruleConfigurationGroup config-class="java.util.ArrayList">
                            <ruleConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.RuleConfiguration"
                                    rule="((@productState == &quot;RECHARGE_ONLY&quot;) &amp;&amp; (@usageDirection == &quot;0&quot;))  => &quot;FALSE&quot;"/>
                            <ruleConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.RuleConfiguration"
                                    rule="((@productState == &quot;RECHARGE_ONLY&quot;) &amp;&amp; (@usageDirection == &quot;1&quot;))  => &quot;TRUE&quot;"/>
                            <ruleConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.RuleConfiguration"
                                    rule="((@productState == &quot;PREACTIVE&quot;) &amp;&amp; (@usageDirection == &quot;0&quot;))  => &quot;TRUE&quot;"/>
                            <ruleConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.RuleConfiguration"
                                    rule="((@productState == &quot;PREACTIVE&quot;) &amp;&amp; (@usageDirection == &quot;1&quot;))  => &quot;FALSE&quot;"/>
                        </ruleConfigurationGroup>
                        <transitionConfigurationGroup config-class="java.util.ArrayList">
                            <transitionConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.TransitionConfiguration"
                                    transition="((@productState == &quot;PREACTIVE&quot;) &amp;&amp; (@usageDirection == &quot;0&quot;))  => [state:&quot;ACTIVE&quot;,expiration:&quot;2&quot;,duration:&quot;days&quot;]"/>
                            <transitionConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.TransitionConfiguration"
                                    transition="(({balance_of([balance_element:&quot;USD&quot;])} &gt;= {ceil_of([balance_element:&quot;USD&quot;])}) &amp;&amp; ((@requestType == &quot;TERMINATE&quot;) &amp;&amp; (@productState == &quot;ACTIVE&quot;)))  => [state:&quot;RECHARGE_ONLY&quot;,expiration:&quot;2&quot;,duration:&quot;days&quot;]"/>
                            <transitionConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.TransitionConfiguration"
                                    transition="(({balance_of([balance_element:&quot;USD&quot;])} &lt; {ceil_of([balance_element:&quot;USD&quot;])}) &amp;&amp; (@productState == &quot;CREDIT_EXPIRED&quot;))  => [state:&quot;ACTIVE&quot;,expiration:&quot;30&quot;,duration:&quot;days&quot;]"
                                    type="EXTERNAL_TOP_UP"/>
                            <transitionConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.TransitionConfiguration"
                                    transition="(({balance_of([balance_element:&quot;USD&quot;])} &lt; {ceil_of([balance_element:&quot;USD&quot;])}) &amp;&amp; (@productState == &quot;RECHARGE_ONLY&quot;))  => [state:&quot;ACTIVE&quot;,expiration:&quot;30&quot;,duration:&quot;days&quot;]"
                                    type="EXTERNAL_TOP_UP"/>
                        </transitionConfigurationGroup>
                    </productLifecycleConfiguration>
                    <productLifecycleConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.ProductLifecycleConfiguration"
                            productType="DATA">
                        <transitionConfigurationGroup config-class="java.util.ArrayList">
                            <transitionConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.TransitionConfiguration"
                                    transition="(({balance_of([balance_element:&quot;USD&quot;])} &lt; {ceil_of([balance_element:&quot;USD&quot;])}) &amp;&amp; (@productState == &quot;CREDIT_EXPIRED&quot;))  => [state:&quot;ACTIVE&quot;,expiration:&quot;30&quot;,duration:&quot;days&quot;]"
                                    type="EXTERNAL_TOP_UP"/>
                            <transitionConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.TransitionConfiguration"
                                    transition="(({balance_of([balance_element:&quot;USD&quot;])} &lt; {ceil_of([balance_element:&quot;USD&quot;])}) &amp;&amp; (@productState == &quot;RECHARGE_ONLY&quot;))  => [state:&quot;ACTIVE&quot;,expiration:&quot;30&quot;,duration:&quot;days&quot;]"
                                    type="EXTERNAL_TOP_UP"/>
                        </transitionConfigurationGroup>
                    </productLifecycleConfiguration>
                    <productLifecycleConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.ProductLifecycleConfiguration"
                            productType="SMS">
                        <transitionConfigurationGroup config-class="java.util.ArrayList">
                            <transitionConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.TransitionConfiguration"
                                    transition="(({balance_of([balance_element:&quot;USD&quot;])} &lt; {ceil_of([balance_element:&quot;USD&quot;])}) &amp;&amp; (@productState == &quot;CREDIT_EXPIRED&quot;))  => [state:&quot;ACTIVE&quot;,expiration:&quot;30&quot;,duration:&quot;days&quot;]"
                                    type="EXTERNAL_TOP_UP"/>
                            <transitionConfiguration
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.lifecycle.TransitionConfiguration"
                                    transition="(({balance_of([balance_element:&quot;USD&quot;])} &lt; {ceil_of([balance_element:&quot;USD&quot;])}) &amp;&amp; (@productState == &quot;RECHARGE_ONLY&quot;))  => [state:&quot;ACTIVE&quot;,expiration:&quot;30&quot;,duration:&quot;days&quot;]"
                                    type="EXTERNAL_TOP_UP"/>
                        </transitionConfigurationGroup>
                    </productLifecycleConfiguration>
                </productConfigurationGroup>
            </lifecycleConfiguration>

            <taxation
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.taxation.TaxConfigurationContainer"
                    defaultTaxSupplierId="1"
                    defaultTaxTime="BILLING">
                <taxDetailsList config-class="java.util.ArrayList">
                    <taxConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.taxation.TaxConfiguration"
                            taxCode="VAT"
                            taxRate="0.05"
                            taxGlId="1400"/>
                    <taxConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.taxation.TaxConfiguration"
                            taxCode="VAT11"
                            taxRate="0.10"
                            taxGlId="1401"/>
                    <taxConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.taxation.TaxConfiguration"
                            taxCode="VAT12"
                            taxRate="0.20"
                            taxGlId="1402"/>
                    <taxConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.taxation.TaxConfiguration"
                            taxCode="NORM1"
                            taxRate="0.25"
                            taxGlId="1403"/>
                </taxDetailsList>
            </taxation>

            <itemAssignmentConfig
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.item.ItemAssignmentConfig"
                    itemAssignmentEnabled={{ .Values.charging.itemAssignmentConfig.itemAssignmentEnabled | quote}} delayToleranceIntervalInDays={{ .Values.charging.itemAssignmentConfig.delayToleranceIntervalInDays | quote}} poidPersistenceSafeCount={{ .Values.charging.itemAssignmentConfig.poidPersistenceSafeCount | quote}}>
                <schemaConfigurationGroup config-class="java.util.ArrayList">
                    {{ range $key, $value := .Values.charging.itemAssignmentConfig.poidIdConfigurations }}
                    <poidIdConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.item.PoidIdConfiguration"
                            schemaName={{ $value.schemaName | quote}}
                            poidQuantity={{ $value.poidQuantity | quote}}>
                    </poidIdConfiguration>
                    {{ end }}
                </schemaConfigurationGroup>
            </itemAssignmentConfig>


            <expirationConfiguration
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.housekeeping.ExpirationConfiguration"
                    expiredAuditRetentionIntervalInDays={{ .Values.charging.expirationConfiguration.expiredAuditRetentionIntervalInDays | quote}}
                    expiredPurchasedChargesRetentionIntervalInDays={{ .Values.charging.expirationConfiguration.expiredPurchasedChargesRetentionIntervalInDays | quote}}
                    expiredPurchasedAlterationRetentionIntervalInDays={{ .Values.charging.expirationConfiguration.expiredPurchasedAlterationRetentionIntervalInDays | quote}}
                    expiredRatingProfileRetentionIntervalInDays={{ .Values.charging.expirationConfiguration.expiredRatingProfileRetentionIntervalInDays | quote}}
                    defaultExpirationRetentionIntervalInDays={{ .Values.charging.expirationConfiguration.defaultExpirationRetentionIntervalInDays | quote}}
                    defaultExpiredBalanceItemRetentionIntervalInDays={{ .Values.charging.expirationConfiguration.defaultExpiredBalanceItemRetentionIntervalInDays | quote}}
                    defaultExpiredRBundleHistoryRetentionIntervalInDays={{ .Values.charging.expirationConfiguration.defaultExpiredRBundleHistoryRetentionIntervalInDays | quote}}
                    expiredAsoRetentionIntervalInDays={{ .Values.charging.expirationConfiguration.expiredAsoRetentionIntervalInDays | quote}}
                    debitRefundSessionCleanUpIntervalInDays={{ .Values.charging.expirationConfiguration.debitRefundSessionCleanUpIntervalInDays | quote}}>
                <balanceItemExpirationList config-class="java.util.ArrayList">
                    <balanceItemExpiration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.housekeeping.BalanceItemExpirationConfiguration"
                            balanceElement="BONUS_POINTS"
                            expiredBalanceItemRetentionIntervalInDays="70"/>
                    <balanceItemExpiration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.housekeeping.BalanceItemExpirationConfiguration"
                            balanceElement="FREE_MIN"
                            expiredBalanceItemRetentionIntervalInDays="80"/>
                </balanceItemExpirationList>
            </expirationConfiguration>

            <!-- Configurable settings for CachePersistence
                name -> the ECE cluster name
                persistenceStoreType  -> Type of Persistence Store where the Cache data is persisted.
                                         The possible values are OracleDB and NoSQL
                                         This should be decided once for a deployment. Once set, should not be changed through the deployment lifetime.
                persistenceConnectionName  -> The name of the Persistence Connection from the Connections
                                             section within this configuration file.
                reloadThreadPoolSize  -> The thread pool size used for Reload Activities.
                                         1. Reload activities are recovery of data during partition load scenarios.
                                         2. Initial loading of data from persistence store into ECE.
                configLoadFromPersistence -> Config data would be load from persistence instead of file, if it is already loaded once.
                                            A value of "true" confirms this behavior.
                                            A value of "false" causes the data to be loaded from the files, even if the data is available in persistence.
                                            When set to "false", will be automatically set to true once the customerLoading phase is complete.
                                            When set to "false", it will also set the state for pricingLoadFromPersistence and customerLoadFromPersistence to "false"
                pricingLoadFromPersistence -> Pricing data would be load from persistence instead of file, if it is already loaded once.
                                            A value of "true" confirms this behavior.
                                            A value of "false" causes the data to be loaded from the files, even if the data is available in persistence.
                                            When set to "false", will be automatically set to true once the customerLoading phase is complete.
                                            When set to "false", it will also set the state for customerLoadFromPersistence to "false"
                customerLoadFromPersistence -> Customer data would be load from persistence instead of file, if it is already loaded once.
                                            A value of "true" confirms this behavior.
                                            A value of "false" causes the data to be loaded from the files, even if the data is available in persistence.
                                            When set to "false", will be automatically set to true once the customerLoading phase is complete.
                partitionLossRecoverFromPersistence -> Data loss during a partition loss event would be recovered from persistence based on this flag.
                                            A value of "true" enabled the Partition Loss Recovery
                                            A value of "false" disables the Partition Loss Recovery
            -->
            <cachePersistenceConfigurations
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.cachepersistence.CachePersistenceConfigurations">
                <cachePersistenceConfigurationList config-class="java.util.ArrayList">
                    {{ range $key, $value := .Values.charging.cachePersistenceConfigurations.cachePersistenceConfigurationList }}
                    <cachePersistenceConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.cachepersistence.CachePersistenceConfig"
                            name={{ $value.clusterName | quote}}
                            persistenceStoreType={{ $value.persistenceStoreType | quote}}
                            persistenceConnectionName={{ $value.persistenceConnectionName | quote}}
                            reloadThreadPoolSize={{ $value.reloadThreadPoolSize | quote}}
                            configLoadFromPersistence={{ $value.configLoadFromPersistence | quote}}
                            pricingLoadFromPersistence={{ $value.pricingLoadFromPersistence | quote}}
                            customerLoadFromPersistence={{ $value.customerLoadFromPersistence | quote}}
                            partitionLossRecoverFromPersistence={{ $value.partitionLossRecoverFromPersistence | quote}}
                            writeBehindThreadPoolSize={{ $value.writeBehindThreadPoolSize | quote}}>
                    </cachePersistenceConfiguration>
                    {{ end }}
                </cachePersistenceConfigurationList>
            </cachePersistenceConfigurations>

            <!-- Configurable settings for multiple instances of EMGatewayConfigurations
                emGatewayConfigurationList  has a list of configuration details for each instance
                emGatewayConfig  has instance specific configuraton information
                name  -> instance name which corresponds to the  nodename in ece_topology.xml.
                port  -> specifies the port for the emgateway server
                threadPoolSize -> the number of threads in thread pool
            -->
            <emGatewayConfigurations
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.emgateway.EMGatewayConfigurations">
                <emGatewayConfigurationList config-class="java.util.ArrayList">
                    {{ range $key, $value := .Values.emgateway.emGatewayList }}
                    <emGatewayConfig
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.emgateway.EMGatewayConfiguration"
                            name={{ $value.emGatewayConfiguration.name | quote}}
                            port={{ $value.emGatewayConfiguration.port | quote}}
                            threadPoolSize={{ $value.emGatewayConfiguration.threadPoolSize | quote}}
                            sslEnabled={{ $value.emGatewayConfiguration.sslEnabled | quote}}
                            socketKeepAlive={{ $value.emGatewayConfiguration.socketKeepAlive | quote}}
                            wallet={{ $.Values.charging.brmWalletServerLocation | quote}}
                            clientAuthenticationEnabled={{ $value.emGatewayConfiguration.clientAuthenticationEnabled | quote}}
                            updateResponseTimeout={{ $value.emGatewayConfiguration.updateResponseTimeout | quote}}/>
                    {{ end }}
                </emGatewayConfigurationList>
            </emGatewayConfigurations>

            <!-- Provides extension hooks in the rating process. Though the beans itself does not require any parameters
                 at the time of initialization make sure any pre or post rating processors configured are in compliance
                 with expected interfaces.
            -->
            <extensions
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.extensions.ExtensionsConfig"
                    preRatingExtension={{ .Values.charging.extensions.preRatingExtension | quote}}
                    ratingExtension={{ .Values.charging.extensions.ratingExtension | quote}}
                    postRatingExtension={{ .Values.charging.extensions.postRatingExtension | quote}}
                    postChargingExtension={{ .Values.charging.extensions.postChargingExtension | quote }}
                    diameterGyExtension={{ .Values.charging.extensions.diameterGyExtension | quote}}
                    radiusAuthExtension={{ .Values.charging.extensions.radiusAuthExtension | quote}}
                    radiusAccountingExtension={{ .Values.charging.extensions.radiusAccountingExtension | quote}}
                    postUpdateExtension={{ .Values.charging.extensions.postUpdateExtension | quote}}
                    httpExtension={{ .Values.charging.extensions.httpExtension | quote}}
                    brmGwExtension={{ .Values.charging.extensions.brmGwExtension | quote}}>
            </extensions>

            <!--
            Configure policy extended information for policy query
            alias - Alias for the extended info which will be referred in the policy query
            dsl - Abstract dsl in <get type>(<product or customer>/<attribute with arguments>) format
                  eg. getObject(customer/customerId)
            -->
            <policyConfig
                config-class="oracle.communication.brm.charging.appconfiguration.beans.policy.PolicyConfig"
                syRejectNoCounters="false">
                <policyExtendedInfoGroup config-class="java.util.ArrayList">
                    <policyExtendedInfo
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.policy.PolicyExtendedInfo"
                            dataReference="61"
                            alias="lifeCycleStateName"
                            dsl="getObject(product/lifeCycleStateName)"/>
                    <policyExtendedInfo
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.policy.PolicyExtendedInfo"
                            dataReference="62"
                            alias="publicIdentifiers"
                            dsl="getObject(product/publicIdentifiers)"/>
                    <policyExtendedInfo
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.policy.PolicyExtendedInfo"
                            dataReference="63"
                            alias="ratingProfileFriends"
                            dsl="getRatingProfile(product/ratingProfileByName?FRIENDS)"/>
                    <policyExtendedInfo
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.policy.PolicyExtendedInfo"
                            dataReference="64"
                            alias="ratingProfileCorporate"
                            dsl="getRatingProfile(customer/ratingProfileByName?CORPORATE)"/>
                </policyExtendedInfoGroup>

                <!--
                To configure policy thresholds, uncomment the below lines and modify
                balanceElementId - Numeric Id of balance element
                tolerance       -  The tolerance value
                -->
                <!--
                      <toleranceConfigMappingGroup config-class="java.util.ArrayList">
                          <toleranceConfig
                                  config-class="oracle.communication.brm.charging.appconfiguration.beans.policy.ToleranceConfig"
                                  balanceElementId="12345" tolerance="1.25"/>

                          <toleranceConfig
                                  config-class="oracle.communication.brm.charging.appconfiguration.beans.policy.ToleranceConfig"
                                  balanceElementId="34567" tolerance="3"/>
                      </toleranceConfigMappingGroup>

                      -->


            </policyConfig>

            <externalTopUpConfig
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.externalTopUp.TopUpHistoryConfig"
                    topUpHistoryCount="3">
            </externalTopUpConfig>

            <ratedEventFormatters
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.ratedeventformatter.RatedEventFormatterConfigurations">
                <ratedEventFormatterConfigurationList config-class="java.util.ArrayList">
                    {{ range $key, $value := .Values.ratedEventFormatter.ratedEventFormatterList }}
                    <ratedEventFormatterConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.ratedeventformatter.RatedEventFormatterConfiguration"
                            name={{ $value.ratedEventFormatterConfiguration.name | quote}}
                            primaryInstanceName={{ $value.ratedEventFormatterConfiguration.primaryInstanceName | quote}}
                            partition={{ $value.ratedEventFormatterConfiguration.partition | quote}}
                            {{ if eq $.Values.charging.persistenceEnabled "true" }}
                            noSQLConnectionName=""
                            connectionName={{ $value.ratedEventFormatterConfiguration.connectionName | quote}}
                            {{ else }}
                            noSQLConnectionName={{ $value.ratedEventFormatterConfiguration.noSQLConnectionName | quote }}
                            connectionName=""
                            {{ end }}
                            threadPoolSize={{ $value.ratedEventFormatterConfiguration.threadPoolSize | quote}}
                            retainDuration={{ $value.ratedEventFormatterConfiguration.retainDuration | quote}}
                            ripeDuration={{ $value.ratedEventFormatterConfiguration.ripeDuration | quote}}
                            checkPointInterval={{ $value.ratedEventFormatterConfiguration.checkPointInterval | quote}}
                            maxPersistenceCatchupTime={{ $value.ratedEventFormatterConfiguration.maxPersistenceCatchupTime | quote}}
                            siteName={{ $value.ratedEventFormatterConfiguration.siteName | quote}}
                            pluginPath={{ $value.ratedEventFormatterConfiguration.pluginPath | quote}}
                            pluginType={{ $value.ratedEventFormatterConfiguration.pluginType | quote}}
                            pluginName={{ $value.ratedEventFormatterConfiguration.pluginName | quote}}
                            noSQLBatchSize={{ $value.ratedEventFormatterConfiguration.noSQLBatchSize | quote}} />
                    {{ end }}
                </ratedEventFormatterConfigurationList>
            </ratedEventFormatters>

            <brmCdrPlugins
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.brmcdrplugin.BrmCdrPluginConfigurations">
                <brmCdrPluginConfigurationList config-class="java.util.ArrayList">
                    {{ range $key, $value := .Values.charging.brmCdrPlugins.brmCdrPluginConfigurationList }}
                    <brmCdrPluginConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.brmcdrplugin.BrmCdrPluginConfiguration"
                            name={{ $value.brmCdrPluginConfiguration.name | quote }}
                            tempDirectoryPath={{ $value.brmCdrPluginConfiguration.tempDirectoryPath | quote }}
                            doneDirectoryPath={{ $value.brmCdrPluginConfiguration.doneDirectoryPath | quote }}
                            invalidRatedEventDirectoryPath={{ $value.brmCdrPluginConfiguration.invalidRatedEventDirectoryPath | quote }}
                            doneFileExtension={{ $value.brmCdrPluginConfiguration.doneFileExtension | quote }}
                            headerFileExtension={{ $value.brmCdrPluginConfiguration.headerFileExtension | quote }}
                            dataFileExtension={{ $value.brmCdrPluginConfiguration.dataFileExtension | quote }}
                            ctlFileExtension={{ $value.brmCdrPluginConfiguration.ctlFileExtension | quote }}
                            headerFileDirectoryPath={{ $value.brmCdrPluginConfiguration.headerFileDirectoryPath | quote }}
                            dataFileDirectoryPath={{ $value.brmCdrPluginConfiguration.dataFileDirectoryPath | quote }}
                            enableInvalidRatedEvents={{ $value.brmCdrPluginConfiguration.enableInvalidRatedEvents | quote }}
                            sqlLoaderCharacterSet={{ $value.brmCdrPluginConfiguration.sqlLoaderCharacterSet | quote }}
                            prepaidPartitionSet={{ $value.brmCdrPluginConfiguration.prepaidPartitionSet | quote }}/>
                    {{ end }}
                </brmCdrPluginConfigurationList>
            </brmCdrPlugins>

            <cdrFormatters
                        config-class="oracle.communication.brm.charging.appconfiguration.beans.cdrformatter.CdrFormatterConfigurations">
                    <cdrFormatterConfigurationList config-class="java.util.ArrayList">
                        {{ range $key, $cluster := split " " (include "clusters" .) }}
                        {{ range $key, $value := $.Values.cdrFormatter.cdrFormatterList }}
                        <cdrFormatterConfiguration
                                config-class="oracle.communication.brm.charging.appconfiguration.beans.cdrformatter.CdrFormatterConfiguration"
                                {{ if and (eq $.Values.charging.isFederation "true") (eq $.Values.charging.autoGenerateAppConfig "true") }}
                                name={{ ( printf "%s%s" $value.cdrFormatterConfiguration.name  $cluster) | quote}}
                                {{ else }}
                                name={{ $value.cdrFormatterConfiguration.name | quote}}
                                {{ end }}
                                primaryInstanceName={{ $value.cdrFormatterConfiguration.primaryInstanceName | quote}}
                                schemaNumber={{ $value.cdrFormatterConfiguration.schemaNumber | quote}}
                                isNoSQLConnection={{ $value.cdrFormatterConfiguration.isNoSQLConnection | quote}}
                                noSQLConnectionName={{ $value.cdrFormatterConfiguration.noSQLConnectionName | quote}}
                                connectionName={{ $value.cdrFormatterConfiguration.connectionName | quote}}
                                threadPoolSize={{ $value.cdrFormatterConfiguration.threadPoolSize | quote}}
                                retainDuration={{ $value.cdrFormatterConfiguration.retainDuration | quote}}
                                ripeDuration={{ $value.cdrFormatterConfiguration.ripeDuration | quote}}
                                checkPointInterval={{ $value.cdrFormatterConfiguration.checkPointInterval | quote}}
                                pluginPath={{ $value.cdrFormatterConfiguration.pluginPath | quote}}
                                pluginType={{ $value.cdrFormatterConfiguration.pluginType | quote}}
                                pluginName={{ $value.cdrFormatterConfiguration.pluginName | quote}}
                                noSQLBatchSize={{ $value.cdrFormatterConfiguration.noSQLBatchSize | quote}}
                                cdrStoreFetchSize={{ $value.cdrFormatterConfiguration.cdrStoreFetchSize | quote}}
                                cdrOrphanRecordCleanupAgeInSec={{ $value.cdrFormatterConfiguration.cdrOrphanRecordCleanupAgeInSec | quote}}
                                cdrOrphanRecordCleanupSleepIntervalInSec={{ $value.cdrFormatterConfiguration.cdrOrphanRecordCleanupSleepIntervalInSec | quote}}/>
                        {{ end }}
                        {{ end }}
                    </cdrFormatterConfigurationList>
            </cdrFormatters>

            <cdrFormatterPlugins
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.cdrformatter.CdrFormatterPluginConfigurations">
                <cdrFormatterPluginConfigurationList config-class="java.util.ArrayList">
                    <cdrFormatterPluginConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.cdrformatter.CdrFormatterPluginConfiguration"
                            name={{ .Values.charging.cdrFormatterPlugins.cdrFormatterPluginConfigurationList.cdrFormatterPluginConfiguration.name | quote }}
                            tempDirectoryPath={{ .Values.charging.cdrFormatterPlugins.cdrFormatterPluginConfigurationList.cdrFormatterPluginConfiguration.tempDirectoryPath | quote }}
                            doneDirectoryPath={{ .Values.charging.cdrFormatterPlugins.cdrFormatterPluginConfigurationList.cdrFormatterPluginConfiguration.doneDirectoryPath | quote }}
                            doneFileExtension={{ .Values.charging.cdrFormatterPlugins.cdrFormatterPluginConfigurationList.cdrFormatterPluginConfiguration.doneFileExtension | quote }}
                            enableKafkaIntegration={{ .Values.charging.cdrFormatterPlugins.cdrFormatterPluginConfigurationList.cdrFormatterPluginConfiguration.enableKafkaIntegration | quote }}
                            enableDiskPersistence={{ .Values.charging.cdrFormatterPlugins.cdrFormatterPluginConfigurationList.cdrFormatterPluginConfiguration.enableDiskPersistence | quote }}
                            maxCdrCount={{ .Values.charging.cdrFormatterPlugins.cdrFormatterPluginConfigurationList.cdrFormatterPluginConfiguration.maxCdrCount | quote }}/>
                </cdrFormatterPluginConfigurationList>
            </cdrFormatterPlugins>

            <diameterGatewayConfigurations
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.diametergateway.DiameterGatewayConfigurations">
                <diameterGatewayConfigurationList config-class="java.util.ArrayList">
                    {{ range $key, $cluster := split " " (include "clusters" .) }}
                    {{ range $key, $value := $.Values.diametergateway.diametergatewayList }}
                    <diameterGatewayConfig
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.diametergateway.DiameterGatewayConfiguration"
                            {{ if and (eq $.Values.charging.isFederation "true") (eq $.Values.charging.autoGenerateAppConfig "true") }}
                            name={{ ( printf "%s%s" $value.diameterGatewayConfiguration.name  $cluster) | quote}}
                            clusterName={{ $cluster | quote}}
                            {{ else }}
                            name={{ $value.diameterGatewayConfiguration.name | quote}}
                            clusterName={{ $value.diameterGatewayConfiguration.clusterName | quote}}
                            {{ end }}
                            diameterTrafficPort={{ $value.diameterGatewayConfiguration.diameterTrafficPort | quote}}
                            ioThreadPoolSize={{ $value.diameterGatewayConfiguration.ioThreadPoolSize | quote}}
                            responseTimeout={{ $value.diameterGatewayConfiguration.responseTimeout | quote}}
                            watchDogInterval={{ $value.diameterGatewayConfiguration.watchDogInterval | quote}}
                            originHost={{ $value.diameterGatewayConfiguration.originHost | quote}}
                            originRealm={{ $value.diameterGatewayConfiguration.originRealm | quote}}
                            diameterTrafficHost={{ $value.diameterGatewayConfiguration.diameterTrafficHost | quote}}
                            diameterTrafficHostSctp={{ $value.diameterGatewayConfiguration.diameterTrafficHostSctp | quote}}
                            loopback={{ $value.diameterGatewayConfiguration.loopback | quote}}
                            requestProcessorThreadPoolSize={{ $value.diameterGatewayConfiguration.requestProcessorThreadPoolSize | quote}}
                            requestProcessorBatchSize={{ $value.diameterGatewayConfiguration.requestProcessorBatchSize | quote}}
                            notificationThreadPoolSize={{ $value.diameterGatewayConfiguration.notificationThreadPoolSize | quote}}
                            maxNotificationCommitSize={{ $value.diameterGatewayConfiguration.maxNotificationCommitSize | quote}}
                            ccFailover={{ $value.diameterGatewayConfiguration.ccFailover | quote}}
                            creditControlFailureHandling={{ $value.diameterGatewayConfiguration.creditControlFailureHandling | quote}}
                            directDebitingFailureHandling={{ $value.diameterGatewayConfiguration.directDebitingFailureHandling | quote}}
                            sctpMaxInStream={{ $value.diameterGatewayConfiguration.sctpMaxInStream | quote}}
                            sctpMaxOutStream={{ $value.diameterGatewayConfiguration.sctpMaxOutStream | quote}}
                            sctpSendBufferSize={{ $value.diameterGatewayConfiguration.sctpSendBufferSize | quote}}
                            sctpReceiveBufferSize={{ $value.diameterGatewayConfiguration.sctpReceiveBufferSize | quote}}/>
                    {{ end }}
                    {{ end }}
                </diameterGatewayConfigurationList>
            </diameterGatewayConfigurations>

            <radiusGatewayEapPriorityConfiguration
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.radiusgateway.RadiusGatewayEapPriorityConfiguration">
                <eapDetailsList config-class="java.util.ArrayList">
                    <eapTypeConfig
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.radiusgateway.EapTypeConfig"
                            id="21"
                            name="TTLS"
                            priority="1"/>
                    <eapTypeConfig
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.radiusgateway.EapTypeConfig"
                            id="4"
                            name="MD5"
                            priority="2"/>
                    <eapTypeConfig
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.radiusgateway.EapTypeConfig"
                            id="5"
                            name="OTP"
                            priority="3"/>
                </eapDetailsList>
            </radiusGatewayEapPriorityConfiguration>

            <radiusGatewayConfigurations
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.radiusgateway.RadiusGatewayConfigurations"
                    wallet={{ .Values.radiusgateway.wallet | quote}}
                    queueSize={{ .Values.radiusgateway.queueSize | quote}}
                    avpName={{ .Values.radiusgateway.avpName | quote}}
                    vendorId={{ .Values.radiusgateway.vendorId | quote}}
                    keyPass={{ .Values.radiusgateway.keyPass | quote}}
                    keyStoreLocation={{ .Values.radiusgateway.keyStoreLocation | quote}}
                    enableRetransmissionCheck={{ .Values.radiusgateway.enableRetransmissionCheck | quote}}
                    timeToLive={{ .Values.radiusgateway.timeToLive | quote}}>
                <radiusGatewayConfigurationList config-class="java.util.ArrayList">
                    {{ range $key, $value := .Values.radiusgateway.radiusgatewayList }}
                    <radiusGatewayConfig
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.radiusgateway.RadiusGatewayConfiguration"
                            name={{ $value.radiusGatewayConfiguration.name | quote}}
                            radiusTrafficPort={{ $value.radiusGatewayConfiguration.radiusTrafficPort | quote}}
                            ioThreadPoolSize={{ $value.radiusGatewayConfiguration.ioThreadPoolSize | quote}}
                            noOfChallenges={{ $value.radiusGatewayConfiguration.noOfChallenges | quote}}
                            eceWalletLocation={{ $.Values.charging.eceWalletLocation | quote}}/>
                    {{ end }}
                </radiusGatewayConfigurationList>
            </radiusGatewayConfigurations>

            <cdrGatewayConfigurations
                        config-class="oracle.communication.brm.charging.appconfiguration.beans.cdrgateway.CdrGatewayConfigurations">
                    <cdrGatewayConfigurationList config-class="java.util.ArrayList">
                        {{ range $key, $cluster := split " " (include "clusters" .) }}
                        {{ range $key, $value := $.Values.cdrgateway.cdrgatewayList }}
                        <cdrGatewayConfiguration
                                config-class="oracle.communication.brm.charging.appconfiguration.beans.cdrgateway.CdrGatewayConfiguration"
                                {{ if and (eq $.Values.charging.isFederation "true") (eq $.Values.charging.autoGenerateAppConfig "true") }}
                                name={{ ( printf "%s%s" $value.cdrGatewayConfiguration.name  $cluster) | quote}}
                                {{ else }}
                                name={{ $value.cdrGatewayConfiguration.name | quote}}
                                {{ end }}
                                primaryInstanceName={{ $value.cdrGatewayConfiguration.primaryInstanceName | quote}}
                                schemaNumber={{ $value.cdrGatewayConfiguration.schemaNumber | quote}}
                                isNoSQLConnection={{ $value.cdrGatewayConfiguration.isNoSQLConnection | quote}}
                                noSQLConnectionName={{ $value.cdrGatewayConfiguration.noSQLConnectionName | quote}}
                                connectionName={{ $value.cdrGatewayConfiguration.connectionName | quote}}
                                cdrPort={{ $value.cdrGatewayConfiguration.cdrPort | quote}}
                                cdrHost={{ $value.cdrGatewayConfiguration.cdrHost | quote}}
                                individualCdr={{ $value.cdrGatewayConfiguration.individualCdr | quote}}
                                cdrServerCorePoolSize={{ $value.cdrGatewayConfiguration.cdrServerCorePoolSize | quote}}
                                cdrServerMaxPoolSize={{ $value.cdrGatewayConfiguration.cdrServerMaxPoolSize | quote}}/>
                        {{ end }}
                        {{ end }}
                    </cdrGatewayConfigurationList>
            </cdrGatewayConfigurations>

            <httpGatewayConfigurations
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.httpgateway.HttpGatewayConfigurations"
                            serverSslKeyStore={{ .Values.httpgateway.serverSslKeyStore | quote}}
                            serverSslKeyStoreType={{ .Values.httpgateway.serverSslKeyStoreType | quote}}
                            serverSslKeyStoreAlias={{ .Values.httpgateway.serverSslKeyStoreAlias | quote}}
                            walletLocation={{ .Values.httpgateway.walletLocation | quote}}
                            snrHttp2Enable={{ .Values.httpgateway.snrHttp2Enable | quote}}
                            cdrGenerationEnabled={{ .Values.httpgateway.cdrGenerationEnabled | quote}}
                            cdrGenerationStandaloneMode={{ .Values.httpgateway.cdrGenerationStandaloneMode | quote}}
                            cdrGatewayList={{ .Values.httpgateway.cdrGatewayList | quote}}
                            cdrGatewayRetry={{ .Values.httpgateway.cdrGatewayRetry | quote}}
                            retryIntervalInMillis={{ .Values.httpgateway.retryIntervalInMillis | quote}}
                            scpAuthorities={{ .Values.httpgateway.scpAuthorities | quote}}
                            rateOfflineCDRinRealtime={{ .Values.httpgateway.rateOfflineCDRinRealtime | quote}}
                            generateCDRsForOnlineRequests={{ .Values.httpgateway.generateCDRsForOnlineRequests | quote}}
                            callScreeningEnabled={{ .Values.httpgateway.callScreeningEnabled | quote}}
                            notificationListenerConnectionPoolSize={{ .Values.httpgateway.notificationListenerConnectionPoolSize | quote}}>
                        <httpGatewayConfigurationList config-class="java.util.ArrayList">
                            {{ range $key, $cluster := split " " (include "clusters" .) }}
                            {{ range $key, $value := $.Values.httpgateway.httpgatewayList }}
                            <httpGatewayConfig
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.httpgateway.HttpGatewayConfiguration"
                                    {{ if and (eq $.Values.charging.isFederation "true") (eq $.Values.charging.autoGenerateAppConfig "true") }}
                                    name={{ ( printf "%s%s" $value.httpGatewayConfiguration.name $cluster ) | quote}}
                                    clusterName={{ $cluster | quote}}
                                    {{ else }}
                                    name={{ $value.httpGatewayConfiguration.name | quote}}
                                    clusterName={{ $value.httpGatewayConfiguration.clusterName | quote}}
                                    {{ end }}
                                    serverHttp2Enabled={{ $value.httpGatewayConfiguration.serverHttp2Enabled | quote}}
                                    serverPort={{ $value.httpGatewayConfiguration.serverPort | quote}}
                                    serverHttpPort={{ $value.httpGatewayConfiguration.serverHttpPort | quote}}
                                    nrfHeartBeatRetryCount={{ $value.httpGatewayConfiguration.nrfHeartBeatRetryCount | quote}}
                                    serverSslEnabled={{ $value.httpGatewayConfiguration.serverSslEnabled | quote}}
                                    kafkaBatchSize={{ $value.httpGatewayConfiguration.kafkaBatchSize | quote}}
                                    processingThreadPoolSize={{ $value.httpGatewayConfiguration.processingThreadPoolSize | quote}}
                                    processingQueueSize={{ $value.httpGatewayConfiguration.processingQueueSize | quote}}
                                    externalTrafficInfo={{ $value.httpGatewayConfiguration.externalTrafficInfo | quote}}/>
                            {{ end }}
                            {{ end }}
                        </httpGatewayConfigurationList>
            </httpGatewayConfigurations>
            <nfProfileConfigurations
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.httpgateway.NFProfileConfigurations"
                            instanceIdMapping={{ .Values.charging.nfProfileConfigurations.instanceIdMapping | quote}}>
                 <nfProfileConfigurationList config-class="java.util.ArrayList">
                       {{ range $key, $cluster := split " " (include "clusters" .) }}
                       {{ range $key, $value := $.Values.charging.nfProfileConfigurations.nfProfileConfigurationList }}
                       <nfProfileConfig
                              config-class="oracle.communication.brm.charging.appconfiguration.beans.httpgateway.NFProfileConfiguration"
                              name={{ $value.name | quote}}
                              clusterName={{ $value.clusterName | quote}}
                              {{ if eq $.Values.charging.isFederation "true" }}
                              httpGatewayName={{ ( printf "%s%s" $value.httpGatewayName $cluster ) | quote}}
                              {{ else }}
                              httpGatewayName={{ $value.httpGatewayName | quote}}
                              {{ end }}
                              nrfRestEndPointUrl={{ $value.nrfRestEndPointUrl | quote}}
                              nrfHttp2Enable={{ $value.nrfHttp2Enable | quote}}
                              nfType={{ $value.nfType | quote}}
                              fqdn={{ $value.fqdn | quote}}
                              ipv4Addresses={{ $value.ipv4Addresses | quote}}
                              capacity={{ $value.capacity | quote}}
                              load={{ $value.load | quote}}
                              supiRangeListStart={{ $value.supiRangeListStart | quote}}
                              supiRangeListEnd={{ $value.supiRangeListEnd | quote}}
                              supiRangeListPattern={{ $value.supiRangeListPattern | quote}}
                              gpsiRangeListStart={{ $value.gpsiRangeListStart | quote}}
                              gpsiRangeListEnd={{ $value.gpsiRangeListEnd | quote}}
                              gpsiRangeListPattern={{ $value.gpsiRangeListPattern | quote}}
                              plmnRangeListStart={{ $value.plmnRangeListStart | quote}}
                              plmnRangeListEnd={{ $value.plmnRangeListEnd | quote}}
                              plmnRangeListPattern={{ $value.plmnRangeListPattern | quote}}
                              nfStatus={{ $value.nfStatus | quote}}
                              heartBeatTimer={{ $value.heartBeatTimer | quote}}
                              plmnListMcc={{ $value.plmnListMcc | quote}}
                              plmnListMnc={{ $value.plmnListMnc | quote}}
                              snssaisSdl={{ $value.snssaisSdl | quote}}
                              snssaisSst={{ $value.snssaisSst | quote}}
                              perPlmnSnssaiListPlmnIdMcc={{ $value.perPlmnSnssaiListPlmnIdMcc | quote}}
                              perPlmnSnssaiListPlmnIdMnc={{ $value.perPlmnSnssaiListPlmnIdMnc | quote}}
                              perPlmnSnssaiListSst={{ $value.perPlmnSnssaiListSst | quote}}
                              perPlmnSnssaiListSd={{ $value.perPlmnSnssaiListSd | quote}}
                              nsiList={{ $value.nsiList | quote}}
                              interPlmnFqdn={{ $value.interPlmnFqdn | quote}}
                              ipv6Addresses={{ $value.ipv6Addresses | quote}}
                              allowedPlmnsMcc={{ $value.allowedPlmnsMcc | quote}}
                              allowedPlmnsMnc={{ $value.allowedPlmnsMnc | quote}}
                              allowedNfTypes={{ $value.allowedNfTypes | quote}}
                              allowedNfDomains={{ $value.allowedNfDomains | quote}}
                              allowedNssaisSst={{ $value.allowedNssaisSst | quote}}
                              allowedNssaisSd={{ $value.allowedNssaisSd | quote}}
                              locality={{ $value.locality | quote}}
                              customInfo={{ $value.customInfo | quote}}
                              recoveryTime={{ $value.recoveryTime | quote}}
                              nfServicePersistence={{ $value.nfServicePersistence | quote}}
                              nfProfileChangesSupportInd={{ $value.nfProfileChangesSupportInd | quote}}
                              nfProfileChangesInd={{ $value.nfProfileChangesInd | quote}}
                              defaultNotificationSubscriptionsNotificationType={{ $value.defaultNotificationSubscriptionsNotificationType | quote}}
                              defaultNotificationSubscriptionsCallbackUri={{ $value.defaultNotificationSubscriptionsCallbackUri | quote}}
                              defaultNotificationSubscriptionsN1MessageClass={{ $value.defaultNotificationSubscriptionsN1MessageClass | quote}}
                              defaultNotificationSubscriptionsN2InformationClass={{ $value.defaultNotificationSubscriptionsN2InformationClass | quote}}/>
                       {{ end }}
                       {{ end }}
                 </nfProfileConfigurationList>
            </nfProfileConfigurations>
            <nfServiceConfigurations
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.httpgateway.NFServiceConfigurations">
                   <nfServiceConfigurationList config-class="java.util.ArrayList">
                         {{ range $key, $cluster := split " " (include "clusters" .) }}
                         {{ range $key, $value := $.Values.charging.nfServiceConfigurations.nfServiceConfigurationList }}
                         <nfServiceConfig
                                config-class="oracle.communication.brm.charging.appconfiguration.beans.httpgateway.NFServiceConfiguration"
                                name={{ $value.name | quote}}
                                {{ if eq $.Values.charging.isFederation "true" }}
                                httpGatewayName={{ ( printf "%s%s" $value.httpGatewayName $cluster ) | quote}}
                                {{ else }}
                                httpGatewayName={{ $value.httpGatewayName | quote}}
                                {{ end }}
                                clusterName={{ $value.clusterName | quote}}
                                serviceInstanceId={{ $value.serviceInstanceId | quote}}
                                serviceName={{ $value.serviceName | quote}}
                                apiVersionInUri={{ $value.apiVersionInUri | quote}}
                                apiFullVersion={{ $value.apiFullVersion | quote}}
                                expiry={{ $value.expiry | quote}}
                                scheme={{ $value.scheme | quote}}
                                nfServiceStatus={{ $value.nfServiceStatus | quote}}
                                ipv4Address={{ $value.ipv4Address | quote}}
                                transport={{ $value.transport | quote}}
                                port={{ $value.port | quote}}
                                capacity={{ $value.capacity | quote}}
                                load={{ $value.load | quote}}
                                priority={{ $value.priority | quote}}
                                interPlmnFqdn={{ $value.interPlmnFqdn | quote}}
                                ipv6Address={{ $value.ipv6Address | quote}}
                                defaultNotificationSubscriptionsNotificationType={{ $value.defaultNotificationSubscriptionsNotificationType | quote}}
                                defaultNotificationSubscriptionsCallbackUri={{ $value.defaultNotificationSubscriptionsCallbackUri | quote}}
                                defaultNotificationSubscriptionsN1MessageClass={{ $value.defaultNotificationSubscriptionsN1MessageClass | quote}}
                                defaultNotificationSubscriptionsN2InformationClass={{ $value.defaultNotificationSubscriptionsN2InformationClass | quote}}
                                allowedPlmnsMcc={{ $value.allowedPlmnsMcc | quote}}
                                allowedPlmnsMnc={{ $value.allowedPlmnsMnc | quote}}
                                allowedNfTypes={{ $value.allowedNfTypes | quote}}
                                allowedNfDomains={{ $value.allowedNfDomains | quote}}
                                allowedNssaisSst={{ $value.allowedNssaisSst | quote}}
                                allowedNssaisSd={{ $value.allowedNssaisSd | quote}}
                                recoveryTime={{ $value.recoveryTime | quote}}
                                supportedFeatures={{ $value.supportedFeatures | quote}}
                                primaryChfServiceInstance={{ $value.primaryChfServiceInstance | quote}}
                                secondaryChfServiceInstance={{ $value.secondaryChfServiceInstance | quote}}
                                fqdn={{ $value.fqdn | quote}}
                                apiPrefix={{ $value.apiPrefix | quote}}/>
                         {{ end }}
                         {{ end }}
                   </nfServiceConfigurationList>
            </nfServiceConfigurations>

            <!--
                For the amtAckQueueName attribute of the customerUpdater, provide the fully qualified
                queue name along with the corresponding schema.
                Ex : PIN_1.AMT_ACK_QUEUE
            -->
            <connectionConfigurations config-class="oracle.communication.brm.charging.appconfiguration.beans.connection.ConnectionConfigurations">
                <connectionConfigurationList config-class="java.util.ArrayList">
                    {{ range $key, $value := .Values.customerUpdater.customerUpdaterList }}
                    {{- with $outer }}
                    <connectionConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.connection.OracleQueueConnectionConfiguration"
                            name={{ $value.oracleQueueConnectionConfiguration.name | quote}}
                            gatewayName={{ $value.oracleQueueConnectionConfiguration.gatewayName | quote}}
                            hostName={{ if (include "brmdbhostname" .) -}} {{ (include "brmdbhostname" .) | quote}} {{- else -}} {{ $value.oracleQueueConnectionConfiguration.hostName | quote}} {{- end }}
                            port={{ if (include "brmdbport" .) -}} {{ (include "brmdbport" .) | quote}} {{- else -}} {{ $value.oracleQueueConnectionConfiguration.port | quote}} {{- end }}
                            sid={{ if (include "brmdbsid" .) -}} {{ (include "brmdbsid" .) | quote}} {{- else -}} {{ $value.oracleQueueConnectionConfiguration.sid | quote}} {{- end }}
                            userName={{ if (include "brmdbusername" .) -}} {{ (include "brmdbusername" .) | quote}} {{- else -}} {{ $value.oracleQueueConnectionConfiguration.userName | quote}} {{- end }}
                            jdbcUrl={{ if (include "brmdbjdbcurl" .) -}} {{ (include "brmdbjdbcurl" .) | quote}} {{- else -}} {{ $value.oracleQueueConnectionConfiguration.jdbcUrl | quote}} {{- end }}
                            queueName={{ $value.oracleQueueConnectionConfiguration.queueName | quote}}
                            suspenseQueueName={{ $value.oracleQueueConnectionConfiguration.suspenseQueueName | quote}}
                            ackQueueName={{ $value.oracleQueueConnectionConfiguration.ackQueueName | quote}}
                            amtAckQueueName={{ $value.oracleQueueConnectionConfiguration.amtAckQueueName | quote}}
                            dbSSLEnabled={{ $value.oracleQueueConnectionConfiguration.dbSSLEnabled | quote}}
                            dbSSLType={{ $value.oracleQueueConnectionConfiguration.dbSSLType | quote}}
                            sslServerCertDN={{ $value.oracleQueueConnectionConfiguration.sslServerCertDN | quote }}
                            trustStoreLocation={{ $value.oracleQueueConnectionConfiguration.trustStoreLocation | quote}}
                            trustStoreType={{ $value.oracleQueueConnectionConfiguration.trustStoreType | quote}}
                            batchSize={{ $value.oracleQueueConnectionConfiguration.batchSize | quote}}
                            schemaNumber={{ $value.schemaNumber | quote}}
                            dbTimeout={{ $value.oracleQueueConnectionConfiguration.dbTimeout | quote}}
                            retryCount={{ $value.oracleQueueConnectionConfiguration.retryCount | quote}}
                            retryInterval={{ $value.oracleQueueConnectionConfiguration.retryInterval | quote}}
                            walletLocation={{ $.Values.charging.eceWalletLocation | quote}}>
                    </connectionConfiguration>
                    {{- end }}
                    {{ end }}
                    <!--
                    ~ Connection configurations for Oracle DB Persistence connection
                    ~ userName = DB User Name
                    ~ password = DB Password in encrypted form
                    ~ jdbcUrl = DB connect URL for JDBC driver.
                    ~ retryCount = Number of times a SQL operation retry would be attempted.
                    ~ retryInterval = Wait time in Seconds between two retries for SQL operation.
                    ~ maxStmtCacheSize = The size of the statement cache within the connection pool.
                    ~ persistenceInitialPoolSize = The initial size of the connection pool used for CacheStore implementation. This value should be greater than or equal to thread-count parameter for BRMFederatedCache in charging-cache-config.xml.
                    ~ persistenceMinPoolSize = The minimum size of the connection pool that would be maintained. These connections would be used for CacheStore implementation. This value should be greater than or equal to thread-count parameter for BRMFederatedCache in charging-cache-config.xml.
                    ~ persistenceMaxPoolSize = The maximum size of the connection pool that would be allowed. These connections would be used for CacheStore implementation.
                    ~ reloadInitialPoolSize = The initial size of the connection pool used for initial priming/Recovering (from partition loss).
                    ~ reloadMinPoolSize = The minimum size of the connection pool that would be maintained. These connections would be used for initial priming/Recovering (from partition loss).
                    ~ reloadMaxPoolSize = The maximum size of the connection pool that would be allowed. These connections would be used for initial priming/Recovering (from partition loss).
                    ~ ratedEventFormatterInitialPoolSize = The initial size of the connection pool used for RatedEventFormatter implementation. This value should be equal to the threadPoolSize of RatedEventFormatter configuration.
                    ~ ratedEventFormatterMinPoolSize = The minimum size of the connection pool that would be maintained. These connections would be used for RatedEventFormatter implementation. This value should be equal to the threadPoolSize of RatedEventFormatter configuration.
                    ~ ratedEventFormatterMaxPoolSize = The maximum size of the connection pool that would be allowed. These connections would be used for RatedEventFormatter implementation. This value should be equal to the threadPoolSize of RatedEventFormatter configuration.
                    ~ ratedEventTablePartitionByMinute = The Oracle partition scheme based on Oracle Automatic List partition scheme for rated events by creation time at the minute level granularity. 5 minute for Coherence AggregateObjectUsage cachestore with write-behind. 20 minute for Coherence AggregateObjectUsage cachesotre with write-through.
                    -->
                    {{ range $key, $value := .Values.charging.connectionConfigurations.OraclePersistenceConnectionConfigurations }}
                    {{- with $outer }}
                    <connectionConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.connection.OraclePersistenceConnectionConfiguration"
                            name={{ $value.name | quote}}
                            userName={{ if (include "ecedbusername" .) -}} {{ (include "ecedbusername" .) | quote}} {{- else -}} {{ $value.userName | quote}} {{- end }}
                            jdbcUrl={{ if (include "ecedbjdbcurl" .) -}} {{ (include "ecedbjdbcurl" .) | quote}} {{- else -}} {{ $value.jdbcUrl | quote}} {{- end }}
                            schemaNumber={{ $value.schemaNumber | quote}}
                            retryCount={{ $value.retryCount | quote}}
                            retryInterval={{ $value.retryInterval | quote}}
                            maxStmtCacheSize={{ $value.maxStmtCacheSize | quote}}
                            connectionWaitTimeout={{ $value.connectionWaitTimeout | quote}}
                            timeoutConnectionCheckInterval={{ $value.timeoutConnectionCheckInterval | quote}}
                            inactiveConnectionTimeout={{ $value.inactiveConnectionTimeout | quote}}
                            databaseConnectionTimeout={{ $value.databaseConnectionTimeout | quote}}
                            persistenceInitialPoolSize={{ $value.persistenceInitialPoolSize | quote}}
                            persistenceMinPoolSize={{ $value.persistenceMinPoolSize | quote}}
                            persistenceMaxPoolSize={{ $value.persistenceMaxPoolSize | quote}}
                            reloadInitialPoolSize={{ $value.reloadInitialPoolSize | quote}}
                            reloadMinPoolSize={{ $value.reloadMinPoolSize | quote}}
                            reloadMaxPoolSize={{ $value.reloadMaxPoolSize | quote}}
                            ratedEventFormatterInitialPoolSize={{ $value.ratedEventFormatterInitialPoolSize | quote}}
                            ratedEventFormatterMinPoolSize={{ $value.ratedEventFormatterMinPoolSize | quote}}
                            ratedEventFormatterMaxPoolSize={{ $value.ratedEventFormatterMaxPoolSize | quote}}
                            ratedEventTablePartitionByMinute={{ $value.ratedEventTablePartitionByMinute | quote}}
                            dbSSLEnabled={{ $value.dbSSLEnabled | quote}}
                            dbSSLType={{ $value.dbSSLType | quote}}
                            sslServerCertDN={{ $value.sslServerCertDN | quote }}
                            trustStoreLocation={{ $value.trustStoreLocation | quote}}
                            trustStoreType={{ $value.trustStoreType | quote}}
                            walletLocation={{ $value.walletLocation | quote}}
                            cdrStorePartitionCount={{ $value.cdrStorePartitionCount | quote}}
                            queryTimeout={{ $value.queryTimeout | quote}}>
                    </connectionConfiguration>
                    {{- end }}
                    {{ end }}
                    {{ range $key, $value := .Values.charging.connectionConfigurations.NoSQLConnectionConfigurations }}
                    {{- with $outer }}
                    <connectionConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.connection.NoSQLConnectionConfiguration"
                            name={{ $value.name | quote}}
                            dataStoreConnection={{ if (include "ecenosqlconnection" .) -}} {{ (include "ecenosqlconnection" .) | quote }} {{- else -}} {{ $value.dataStoreConnection | quote}} {{- end }}
                            dataStoreName={{ $value.dataStoreName | quote}}
                            noSQLTimeout={{ $value.noSQLTimeout | quote}}
                            retryCount={{ $value.retryCount | quote}}
                            cdrStorePartitionCount={{ $value.cdrStorePartitionCount | quote}}>
                    </connectionConfiguration>
                    {{- end }}
                    {{ end }}
                    <connectionConfiguration
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.connection.BRMConnectionConfiguration"
                            name={{ .Values.charging.connectionConfigurations.BRMConnectionConfiguration.name | quote}}
                            hostName={{ .Values.charging.connectionConfigurations.BRMConnectionConfiguration.hostName | quote}}
                            protocol={{ .Values.charging.connectionConfigurations.BRMConnectionConfiguration.protocol | quote}}
                            loginName={{ .Values.charging.connectionConfigurations.BRMConnectionConfiguration.loginName | quote}}
                            cmPort={{ .Values.charging.connectionConfigurations.BRMConnectionConfiguration.cmPort | quote}}
                            loginType={{ .Values.charging.connectionConfigurations.BRMConnectionConfiguration.loginType | quote}}
                            numberOfConnections={{ .Values.charging.connectionConfigurations.BRMConnectionConfiguration.numberOfConnections | quote}}
                            sslEnabled={{ .Values.charging.connectionConfigurations.BRMConnectionConfiguration.sslEnabled | quote}}
                            wallet={{ .Values.charging.connectionConfigurations.BRMConnectionConfiguration.brmwallet | quote}}
                            failOverConnectionUrls={{ .Values.charging.connectionConfigurations.BRMConnectionConfiguration.failOverConnectionUrls | quote}}
                            eceWalletLocation={{ .Values.charging.eceWalletLocation | quote}}>
                    </connectionConfiguration>
                </connectionConfigurationList>
            </connectionConfigurations>

           <brmGatewayConfigurations config-class="oracle.communication.brm.charging.appconfiguration.beans.connection.BRMGatewayConfigurations">
           <brmGatewayConfigurationList config-class="java.util.ArrayList">
                {{ range $key, $cluster := split " " (include "clusters" .) }}
                {{ range $key, $value := $.Values.brmGateway.brmGatewayList }}
                <brmGatewayConfiguration
                     config-class="oracle.communication.brm.charging.appconfiguration.beans.connection.BRMGatewayConfiguration"
                     {{ if and (eq $.Values.charging.isFederation "true") (eq $.Values.charging.autoGenerateAppConfig "true") }}
                     name={{ ( printf "%s%s" $value.brmGatewayConfiguration.name $cluster ) | quote }}
                     clusterName={{ $cluster | quote}}
                     {{ else }}
                     name={{ $value.brmGatewayConfiguration.name | quote}}
                     clusterName={{ $value.brmGatewayConfiguration.clusterName | quote}}
                     {{ end }}
                     emptyQueueThreadSleepInterval={{ $value.brmGatewayConfiguration.emptyQueueThreadSleepInterval | quote }}
                     jmsReceiveSleepInterval={{ $value.brmGatewayConfiguration.jmsReceiveSleepInterval | quote}}
                     brmResponseTimeOutInterval={{ $value.brmGatewayConfiguration.brmResponseTimeOutInterval | quote}}
                     gatewaySleepInterval={{ $value.brmGatewayConfiguration.gatewaySleepInterval | quote}}
                     jmsBatchSize={{ $value.brmGatewayConfiguration.jmsBatchSize | quote}}
                     jmsReceiveTimeout={{ $value.brmGatewayConfiguration.jmsReceiveTimeout | quote}}
                     brmWorkerThreads={{ $value.brmGatewayConfiguration.brmWorkerThreads | quote}}
                     brmSchedulerThreadInitialDelay={{ $value.brmGatewayConfiguration.brmSchedulerThreadInitialDelay | quote}}
                     brmSchedulerThreadDelayPeriod={{ $value.brmGatewayConfiguration.brmSchedulerThreadDelayPeriod | quote}}
                     brmSuspenseQueuePeriod={{ $value.brmGatewayConfiguration.brmSuspenseQueuePeriod | quote}}
                     connectionRetryCount={{ $value.brmGatewayConfiguration.connectionRetryCount | quote}}
                     connectionRetryInterval={{ $value.brmGatewayConfiguration.connectionRetryInterval | quote}}
                     schemaNumber={{ $value.schemaNumber | quote}}>
                </brmGatewayConfiguration>
                {{ end }}
                {{ end }}
           </brmGatewayConfigurationList>
           </brmGatewayConfigurations>

            <!--
            A Sample redirection Rule
            redirectionRule="( @fui AND ({business_profile([name:&quot;PREPAID&quot;])}  == &quot;true&quot;) ) => [redirect_type:&quot;URL&quot;,redirect_address:&quot;http://myPrePaidInsufficientFundRedirect.com&quot;,redirect_validity:&quot;3900&quot;];
           ( @fui AND ({business_profile([name:&quot;POSTPAID&quot;])}  == &quot;true&quot;) )  => [redirect_type:&quot;URL&quot;,redirect_address:&quot;http://myPostPaidInsufficientFundRedirect.com&quot;,redirect_validity:&quot;4000&quot;]
           "
           -->
            <redirectionConfiguration config-class="oracle.communication.brm.charging.appconfiguration.beans.redirection.RedirectionConfig"
                                      redirectionRule = "">
            </redirectionConfiguration>

            <midSessionCdrConfiguration
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.midsessioncdr.MidSessionCdrConfiguration"
                    midSessionCdrEnabled="false">
            </midSessionCdrConfiguration>

             <!--Fetch terminating customer in rating execution based on configuration.-->
             <!--For a rating request with matching product and event configuration, -->
             <!--the terminating customer will be fetched and can be used in the rating -->
             <!--flow such as in the rating extensions. -->
            <fetchTerminatingCustomerConfiguration
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.fetchterminatingcustomer.FetchTerminatingCustomerConfiguration">
                <!--<productConfigurationGroup config-class="java.util.ArrayList">-->
                    <!--<productConfiguration-->
                            <!--config-class="oracle.communication.brm.charging.appconfiguration.beans.fetchterminatingcustomer.FetchTerminatingCustomerProductConfiguration"-->
                            <!--productType="VOICE">-->
                        <!--<eventConfigurationGroup config-class="java.util.ArrayList">-->
                            <!--<eventConfiguration-->
                                    <!--config-class="oracle.communication.brm.charging.appconfiguration.beans.fetchterminatingcustomer.FetchTerminatingCustomerEventConfiguration"-->
                                    <!--eventType="USAGE">-->
                            <!--</eventConfiguration>-->
                        <!--</eventConfigurationGroup>-->
                    <!--</productConfiguration>-->
                <!--</productConfigurationGroup>-->
            </fetchTerminatingCustomerConfiguration>

            <!--
            This configuration is to configure the notification header properties.
            Specify the required service event type as the event type and the properties required for that event type should be the comma separated values.
            Each value is the pair of the name of the header property and the xpath representation(as per the XSD of the notification) of the property which we intend to put in the header.
            The pair is separated by : symbol. Example>  attributes="HeaderProperty1Name://HeaderProperty1Expression , HeaderProperty2Name://HeaderProperty2Expression"
            Please refer to the example below for configuring header attributes for a particular event.

                    <notificationHeaderConfig
                        config-class="oracle.communication.brm.charging.appconfiguration.beans.notification.NotificationHeaderConfig"
                        eventType="CREDIT_CEILING_BREACH_NOTIFICATION_EVENT" attributes="Operationtype://OperationType, PUID://PublicUserIdentities/PublicUserIdentity" />

            In the above example for the event "CREDIT_CEILING_BREACH_NOTIFICATION_EVENT" we have configured two attributes
            having the key name and their respective xpath expression by referring to their XSD.
            The published notification message Header property keys will be OperationType and PUID with corresponding values.
            For any configured value, if multiple occurrences of the same value exits in the notification xml message, we always put the first occurrence value in the header property.

            Any attributes that are common to all the events can be added to the eventType="COMMON_HEADER_ATTRIBUTES".
            Ex : NotificationType, version
            -->
            <notificationHeaderConfigurations
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.notification.NotificationHeaderEnrichmentConfigurations">
                <notificationHeaderConfigGroup config-class="java.util.ArrayList">
                    <notificationHeaderConfig
                            config-class="oracle.communication.brm.charging.appconfiguration.beans.notification.NotificationHeaderConfig"
                            eventType="COMMON_HEADER_ATTRIBUTES" attributes=" " />
                    <notificationHeaderConfig
                        config-class="oracle.communication.brm.charging.appconfiguration.beans.notification.NotificationHeaderConfig"
                        eventType="THRESHOLD_BREACH_EVENT" attributes="OperationType://OperationType" />
                    <notificationHeaderConfig
                        config-class="oracle.communication.brm.charging.appconfiguration.beans.notification.NotificationHeaderConfig"
                        eventType="CREDIT_FLOOR_BREACH_NOTIFICATION_EVENT" attributes="OperationType://OperationType" />
                    <notificationHeaderConfig
                        config-class="oracle.communication.brm.charging.appconfiguration.beans.notification.NotificationHeaderConfig"
                        eventType="CREDIT_CEILING_BREACH_NOTIFICATION_EVENT" attributes="OperationType://OperationType" />
                </notificationHeaderConfigGroup>
            </notificationHeaderConfigurations>

            <!-- Configurable settings for multiple instances of brsConfigurations
               brsConfigurationList  has a list of configuration details for each instance
               brsConfig  has instance specific configuraton information
               below is the  default for the customers upgrading to the PS12.2..
               name  -> instance name which corresponds to the  nodename/rolename in ece_topology.xml.
           -->
            <brsConfigurations config-class="oracle.communication.brm.charging.appconfiguration.beans.brs.BrsConfigurations">
                <brsConfigurationList config-class="java.util.ArrayList">
                    <brsConfig config-class="oracle.communication.brm.charging.appconfiguration.beans.brs.BrsConfiguration"
                               acceptablePendingCount={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.acceptablePendingCount | quote }}
                               highPriorityBatchSize={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.highPriorityBatchSize | quote }}
                               highPriorityBatchTimeout={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.highPriorityBatchTimeout | quote }}
                               highPriorityThreadPoolSize={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.highPriorityThreadPoolSize | quote }}
                               name={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.name | quote }}
                               overloadProtection={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.overloadProtection | quote }}
                               pendingRequestHeapUsageThresholdPercentage={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.pendingRequestHeapUsageThresholdPercentage | quote }}
                               regularPriorityBatchSize={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.regularPriorityBatchSize | quote }}
                               regularPriorityBatchTimeout={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.regularPriorityBatchTimeout | quote }}
                               regularPriorityThreadPoolSize={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.regularPriorityThreadPoolSize | quote }}
                               reportingWindowSize={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.reportingWindowSize | quote }}
                               responseTimeout={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.responseTimeout | quote }}
                               thresholdLatency={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.thresholdLatency | quote }}
                               throttleProcessingPerCustomer={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.throttleProcessingPerCustomer | quote }}
                               httpConnectionPoolMax={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.httpConnectionPoolMax | quote }}
                               updateResponseMaxWaitTime={{ .Values.charging.brsConfigurations.brsConfigurationList.brsConfig.updateResponseMaxWaitTime | quote }}/>
                </brsConfigurationList>
            </brsConfigurations>

            <kafkaConfigurations config-class="oracle.communication.brm.charging.appconfiguration.beans.kafka.KafkaConfigurations">
                <kafkaConfigurationList config-class="java.util.ArrayList">
                    {{ range $key, $value := .Values.charging.kafkaConfigurations.kafkaConfigurationList }}
                    <kafkaConfiguration config-class="oracle.communication.brm.charging.appconfiguration.beans.kafka.KafkaConfiguration"
                                name={{ $value.name | quote }}
                                hostname={{ $value.hostname | quote }}
                                topicName={{ $value.topicName | quote }}
                                suspenseTopicName={{ $value.suspenseTopicName | quote }}
                                persistFailedRequestsToKafkaTopic={{ $value.persistFailedRequestsToKafkaTopic | quote }}
                                failureTopicName={{ $value.failureTopicName | quote }}
                                partitions={{ $value.partitions | quote }}
                                failurePartitions={{ $value.failurePartitions | quote }}
                                kafkaProducerReconnectionInterval={{ $value.kafkaProducerReconnectionInterval | quote }}
                                kafkaProducerReconnectionMax={{ $value.kafkaProducerReconnectionMax | quote }}
                                kafkaDGWReconnectionInterval={{ $value.kafkaDGWReconnectionInterval | quote }}
                                kafkaDGWReconnectionMax={{ $value.kafkaDGWReconnectionMax | quote }}
                                kafkaBRMReconnectionInterval={{ $value.kafkaBRMReconnectionInterval | quote }}
                                kafkaBRMReconnectionMax={{ $value.kafkaBRMReconnectionMax | quote }}
                                kafkaHTTPReconnectionInterval={{ $value.kafkaHTTPReconnectionInterval | quote }}
                                kafkaHTTPReconnectionMax={{ $value.kafkaHTTPReconnectionMax | quote }}/>
                    {{ end }}
                </kafkaConfigurationList>
            </kafkaConfigurations>

            {{ if eq .Values.charging.isFederation "true" }}
            <!--  This configuration is for Active - Active DR setup. Uncomment this for enabling active-active along with site-configuration.xml in monitoring agent.
              CustomerGroupConfiguration.name : The value in PublicUserIdentity cache entry customerGroup will be updated with the group name. Also this is used for customerGroup to cluster name mapping.
              clusterPreferenceList : This will contain the list of cluster name and its priority for routing in case of site failure.
              clusterPreferenceConfiguration.name : Cluster Name
              clusterPreferenceConfiguration.priority : Priority of the cluster for the given customerGroup name. Lower the number highest priority.
              clusterPreferenceConfiguration.routingGatewayList : This will have comma separated list of host:port of chargingServer (httpGateway) used for payloadGateway.
            -->
            <customerGroupConfigurations config-class="oracle.communication.brm.charging.appconfiguration.beans.customergroup.CustomerGroupConfigurations">
                <customerGroupConfigurationList config-class="java.util.ArrayList">
                    {{ range $key, $customergroups := .Values.charging.customerGroupConfigurations }}
                    <customerGroupConfiguration config-class="oracle.communication.brm.charging.appconfiguration.beans.customergroup.CustomerGroupConfiguration" name={{ $customergroups.name | quote}}>
                        <clusterPreferenceList config-class="java.util.ArrayList">
                            {{ range $key, $customergrouppref := $customergroups.clusterPreference }}
                            <clusterPreferenceConfiguration config-class="oracle.communication.brm.charging.appconfiguration.beans.customergroup.ClusterPreferenceConfiguration"
                                name={{ $customergrouppref.name | quote}}
                                priority={{ $customergrouppref.priority | quote}}
                                routingGatewayList={{ $customergrouppref.routingGatewayList | quote}}/>
                            {{ end }}
                        </clusterPreferenceList>
                    </customerGroupConfiguration>
                    {{ end }}
                </customerGroupConfigurationList>
            </customerGroupConfigurations>
            {{ end }}
        </charging>
    </config>
  migration-configuration.xml: |
    <?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
    <config>
        <migration>
            <loader config-class="oracle.communication.brm.charging.appconfiguration.beans.migration.MigrationLoaderConfig"
                    pricingDataDirectory={{ .Values.migration.loader.pricingDataDirectory | quote}}
                    configObjectsDataDirectory={{ .Values.migration.loader.configObjectsDataDirectory | quote}}
                    productOfferingCrossRefFilePath={{ .Values.migration.loader.productOfferingCrossRefFilePath | quote }}
                    customerDataDirectory={{ .Values.migration.loader.customerDataDirectory | quote}}
                    customerXmlPattern={{ .Values.migration.loader.customerXmlPattern | quote}}
                    remoteWmThreads={{ .Values.migration.loader.remoteWmThreads | quote}}
                    batchSize={{ .Values.migration.loader.batchSize | quote}}
                    dbConnections={{ .Values.migration.loader.dbConnections | quote}}
                    dbFetchSize={{ .Values.migration.loader.dbFetchSize | quote}}
                    payloadConfigFilePath={{ .Values.migration.loader.payloadConfigFilePath | quote}}
                    selectiveMigrationMode={{ .Values.migration.loader.selectiveMigrationMode | quote}}
                    >
            </loader>

            <!--Mapping of consumption rule for PDC and BRM systems-->
            <consumptionRuleMapping
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.migration.ConsumptionRuleMapping">

                <!--Mapping of consumption rule in BRM to consumption rule in ECE.
                field first indicates rule in BRM
                field second indicates rule in ECE
                -->
                <brmConsumptionRuleMappingList config-class="java.util.ArrayList">
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="0" second="NONE"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="1" second="EARLIEST_START"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="2" second="LATEST_START"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="3" second="EARLIEST_EXPIRATION"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="4" second="LATEST_EXPIRATION"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="5" second="EARLIEST_START_LATEST_EXPIRATION"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="6" second="EARLIEST_START_EARLIEST_EXPIRATION"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="7" second="LATEST_START_EARLIEST_EXPIRATION"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="8" second="LATEST_START_LATEST_EXPIRATION"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="9" second="EARLIEST_EXPIRATION_EARLIEST_START"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="10" second="EARLIEST_EXPIRATION_LATEST_START"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="11" second="LATEST_EXPIRATION_EARLIEST_START"/>
                    <brmConsumptionRuleMapping config-class="oracle.communication.brm.charging.util.misc.Pair" first="12" second="LATEST_EXPIRATION_LATEST_START"/>
                </brmConsumptionRuleMappingList>

            </consumptionRuleMapping>
            <!--Credentials to connect to PDC publish queue-->
            <pricingUpdater
                config-class="oracle.communication.brm.charging.appconfiguration.beans.pricingupdater.PricingUpdaterConfig"
                hostName={{ .Values.migration.pricingUpdater.hostName | quote}}
                port={{ .Values.migration.pricingUpdater.port | quote}}
                userName={{ .Values.migration.pricingUpdater.userName | quote}}
                connectionURL={{ .Values.migration.pricingUpdater.connectionURL | quote}}
                connectionRetryCount={{ .Values.migration.pricingUpdater.connectionRetryCount | quote}}
                connectionRetrySleepInterval={{ .Values.migration.pricingUpdater.connectionRetrySleepInterval | quote}}
                connectionFactory={{ .Values.migration.pricingUpdater.connectionFactory | quote}}
                workItemQueueName={{ .Values.migration.pricingUpdater.workItemQueueName | quote}}
                workResultQueueName={{ .Values.migration.pricingUpdater.workResultQueueName | quote}}
                protocol={{ .Values.migration.pricingUpdater.protocol | quote}}
                initialContextFactory={{ .Values.migration.pricingUpdater.initialContextFactory | quote}}
                requestTimeOut={{ .Values.migration.pricingUpdater.requestTimeOut | quote}}
                keyStoreLocation={{ .Values.migration.pricingUpdater.keyStoreLocation | quote}}
                requestSpecXMLGenarationEnabled={{ .Values.migration.pricingUpdater.requestSpecXMLGenarationEnabled | quote}}
                requestSpecXMLGenarationLocation={{ .Values.migration.pricingUpdater.requestSpecXMLGenarationLocation | quote}}
                eceWalletLocation={{ .Values.charging.eceWalletLocation | quote}}>
                </pricingUpdater>
        </migration>
    </config>
  test-tools.xml: |
    <?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
    <config>
        <test-tools>
            <common config-class="oracle.communication.brm.charging.appconfiguration.beans.common.CommonConfig"
                    numCustomers={{ .Values.testtools.common.numCustomers | quote }}
                    startCustomerId={{ .Values.testtools.common.startCustomerId | quote }}
                    numTxCustomers={{ .Values.testtools.common.numTxCustomers | quote }}
                    startTxCustomerId={{ .Values.testtools.common.startTxCustomerId | quote }}
                    numProducts={{ .Values.testtools.common.numProducts | quote }}>
            </common>

            <simulators config-class="oracle.communication.brm.charging.appconfiguration.beans.simulator.Simulators">
                <simulatorConfigurationList config-class="java.util.ArrayList">
                    <simulatorConfig config-class="oracle.communication.brm.charging.appconfiguration.beans.simulator.SimulatorConfiguration"
                            name={{ .Values.testtools.simulators.simulatorConfig.name | quote }}
                            duration={{ .Values.testtools.simulators.simulatorConfig.duration | quote }}
                            throughput={{ .Values.testtools.simulators.simulatorConfig.throughput | quote }}
                            usageIC={{ .Values.testtools.simulators.simulatorConfig.usageIC  | quote}}
                            usageIUT={{ .Values.testtools.simulators.simulatorConfig.usageIUT  | quote}}
                            usageT={{ .Values.testtools.simulators.simulatorConfig.usageT  | quote}}
                            usageP={{ .Values.testtools.simulators.simulatorConfig.usageP  | quote}}
                            usageTraffic={{ .Values.testtools.simulators.simulatorConfig.usageTraffic  | quote}}
                            queryTraffic={{ .Values.testtools.simulators.simulatorConfig.queryTraffic  | quote}}
                            policyTraffic={{ .Values.testtools.simulators.simulatorConfig.policyTraffic  | quote}}
                            queryBalance={{ .Values.testtools.simulators.simulatorConfig.queryBalance  | quote}}
                            balanceQueryMode={{ .Values.testtools.simulators.simulatorConfig.balanceQueryMode  | quote}}
                            querySubscriberPreference={{ .Values.testtools.simulators.simulatorConfig.querySubscriberPreference  | quote}}
                            queryAuthentication={{ .Values.testtools.simulators.simulatorConfig.queryAuthentication  | quote}}
                            policySubscriptionTraffic={{ .Values.testtools.simulators.simulatorConfig.policySubscriptionTraffic  | quote}}
                            policySpendingLimitNotificationTraffic={{ .Values.testtools.simulators.simulatorConfig.policySpendingLimitNotificationTraffic  | quote}}
                            policySessionTraffic={{ .Values.testtools.simulators.simulatorConfig.policySessionTraffic  | quote}}
                            policySubscriberPreferences={{ .Values.testtools.simulators.simulatorConfig.policySubscriberPreferences  | quote}}
                            policyCounters={{ .Values.testtools.simulators.simulatorConfig.policyCounters  | quote}}
                            updateBalance={{ .Values.testtools.simulators.simulatorConfig.updateBalance  | quote}}
                            updateTypeCreateCustomer={{ .Values.testtools.simulators.simulatorConfig.updateTypeCreateCustomer  | quote}}
                            updatePui={{ .Values.testtools.simulators.simulatorConfig.updatePui  | quote}}
                            writeLogPercentage={{ .Values.testtools.simulators.simulatorConfig.writeLogPercentage  | quote}}
                            productType={{ .Values.testtools.simulators.simulatorConfig.productType  | quote}}
                            sessionStartDate={{ .Values.testtools.simulators.simulatorConfig.sessionStartDate  | quote}}
                            tokenUnits={{ .Values.testtools.simulators.simulatorConfig.tokenUnits  | quote}}
                            mscc={{ .Values.testtools.simulators.simulatorConfig.mscc  | quote}}
                            useCondensedPeriodBetweenOperationsInSession={{ .Values.testtools.simulators.simulatorConfig.useCondensedPeriodBetweenOperationsInSession  | quote}}
                            txTraffic={{ .Values.testtools.simulators.simulatorConfig.txTraffic  | quote}}
                            latencyTrackingResetDelayInSeconds={{ .Values.testtools.simulators.simulatorConfig.latencyTrackingResetDelayInSeconds  | quote}}
                            immediateRun="true"
                            eventType="EventDelayedSessionTelcoGsm">
                        <sessionUnitConfigurations config-class="java.util.ArrayList">
                            <sessionUnitConfig
                                    config-class="oracle.communication.brm.charging.appconfiguration.beans.simulator.SessionUnitConfig"
                                    sessionUnits={{ .Values.testtools.simulators.sessionUnitConfig.sessionUnits  | quote}}
                                    percentage={{ .Values.testtools.simulators.sessionUnitConfig.percentage  | quote}}/>
                        </sessionUnitConfigurations>
                    </simulatorConfig>
                </simulatorConfigurationList>
            </simulators>

            <loader config-class="oracle.communication.brm.charging.appconfiguration.beans.loader.LoaderConfig"
                    customerBatchSize={{ .Values.testtools.loader.customerBatchSize | quote }}
                    customerThreads={{ .Values.testtools.loader.customerThreads | quote }}
                    numCreditProfiles={{ .Values.testtools.loader.numCreditProfiles | quote }}
                    numSubscriptionProductOfferings={{ .Values.testtools.loader.numSubscriptionProductOfferings | quote }}
                    purchasedOfferingsPerProduct={{ .Values.testtools.loader.purchasedOfferingsPerProduct | quote }}
                    rum={{ .Values.testtools.loader.rum | quote }}
                    subscriptionGraphs={{ .Values.testtools.loader.subscriptionGraphs | quote }}
                    systemAlterationGraphs={{ .Values.testtools.loader.systemAlterationGraphs | quote }}
                    numSystemAlterationOfferings={{ .Values.testtools.loader.numSystemAlterationOfferings | quote }}
                    specFilesDirectory={{ .Values.testtools.loader.specFilesDirectory | quote }}>
            </loader>

            <customerGenerator
                    config-class="oracle.communication.brm.charging.appconfiguration.beans.customerGenerator.CustomerGeneratorConfig"
                    customersPerFile={{ .Values.testtools.customerGenerator.customersPerFile | quote }}
                    balanceAmount={{ .Values.testtools.customerGenerator.balanceAmount | quote }}
                    balanceElementId={{ .Values.testtools.customerGenerator.balanceElementId | quote }}
                    productOfferings={{ .Values.testtools.customerGenerator.productOfferings | quote }}
                    alterationOfferings={{ .Values.testtools.customerGenerator.alterationOfferings | quote }}
                    distributionOfferings={{ .Values.testtools.customerGenerator.distributionOfferings | quote }}
                    shareAlterationAgreements={{ .Values.testtools.customerGenerator.shareAlterationAgreements | quote }}
                    productTypes={{ .Values.testtools.customerGenerator.productTypes | quote }}
                    destinationDir={{ .Values.testtools.customerGenerator.destinationDir | quote }}
                    balanceItemsPerBalance={{ .Values.testtools.customerGenerator.balanceItemsPerBalance | quote }}
                    aliasesPerProduct={{ .Values.testtools.customerGenerator.aliasesPerProduct | quote }}
                    productRatingProfiles={{ .Values.testtools.customerGenerator.productRatingProfiles | quote }}
                    customerRatingProfiles={{ .Values.testtools.customerGenerator.customerRatingProfiles | quote }}
                    numAuditRevisions={{ .Values.testtools.customerGenerator.numAuditRevisions | quote }}
                    validateXml={{ .Values.testtools.customerGenerator.validateXml | quote }}
                    isTemplateDriven={{ .Values.testtools.customerGenerator.isTemplateDriven | quote }}
                    customerTemplateFile={{ .Values.testtools.customerGenerator.customerTemplateFile | quote }}
                    txCustomerTemplateFile={{ .Values.testtools.customerGenerator.txCustomerTemplateFile | quote }}
                    multipleBalances={{ .Values.testtools.customerGenerator.multipleBalances | quote }}
                    extendedCustomerAttributes={{ .Values.testtools.customerGenerator.extendedCustomerAttributes | quote }}
                    extendedProductAttributes={{ .Values.testtools.customerGenerator.extendedProductAttributes | quote }}>
            </customerGenerator>
        </test-tools>
    </config>
  log4j2.yaml: |-
    Configuration:
      Properties:
        Property:
          name: LOG_DIR
          value: "${env:ECE_LOG_FILE_PATH:-${sys:ECE_LOG_FILE_PATH:-./logs/ece}}"

      Appenders:
        Console:
          - name: Console
            target: SYSTEM_OUT
            immediateFlush: false
            PatternLayout:
              pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS zzz} %5p - %X{correlationId} - %X{requestId} - %X{customerId} - %m%n"
        RollingFile:
          - name: ECE_LOG
            fileName: "${LOG_DIR}.log"
            filePattern: "${LOG_DIR}.log.%i"
            immediateFlush: false
            PatternLayout:
              pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS zzz} %5p - %X{correlationId} - %X{requestId} - %X{customerId} - %m%n"
            Policies:
              SizeBasedTriggeringPolicy:
                size: "20MB"
            DefaultRolloverStrategy:
              max: "99"
          - name: ECE_SUMMARY_REPORT
            createOnDemand: true
            fileName: "${LOG_DIR}_ECE_SUMMARY_REPORT.log"
            filePattern: "${LOG_DIR}_ECE_SUMMARY_REPORT_%d{yyyy-MM-dd-HH}.log"
            immediateFlush: false
            PatternLayout:
              pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS zzz} %5p - %X{correlationId} - %X{requestId} - %X{customerId} - %m%n"
            Policies:
              TimeBasedTriggeringPolicy:
                interval: 1
                modulate: true
            DefaultRolloverStrategy:
              Delete:
                basePath: "${LOG_DIR}"
                maxDepth: 1
                IfFileName:
                  glob: "${sys:tangosol.coherence.member}_ECE_SUMMARY_REPORT_*.log"
                IfAccumulatedFileCount:
                  exceeds: 24
          - name: ECE_ALERT_REPORT
            createOnDemand: true
            fileName: "${LOG_DIR}_ECE_ALERT_REPORT.log"
            filePattern: "${LOG_DIR}_ECE_ALERT_REPORT_%d{yyyy-MM-dd-HH}.log"
            immediateFlush: false
            PatternLayout:
              pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS zzz} %5p - %X{correlationId} - %X{requestId} - %X{customerId} - %m%n"
            Policies:
              TimeBasedTriggeringPolicy:
                interval: 1
                modulate: true
            DefaultRolloverStrategy:
              Delete:
                basePath: "${LOG_DIR}"
                maxDepth: 1
                IfFileName:
                  glob: "${sys:tangosol.coherence.member}_ECE_ALERT_REPORT_*.log"
                IfAccumulatedFileCount:
                  exceeds: 24
          - name: REM
            fileName: "${sys:REM_LOG_BASE}.log"
            filePattern: "${sys:REM_LOG_BASE}.log.%i"
            immediateFlush: false
            PatternLayout:
              pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5p] [%t] %m%n"
            Policies:
              SizeBasedTriggeringPolicy:
                size: "100MB"
            DefaultRolloverStrategy:
              max: "99"
          - name: REM_DIAG
            fileName: "${sys:REM_LOG_BASE}_DIAG.log"
            filePattern: "${sys:REM_LOG_BASE}_DIAG.log.%i"
            immediateFlush: false
            PatternLayout:
              pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5p] [%t] %m%n"
            Policies:
              SizeBasedTriggeringPolicy:
                size: "100MB"
            DefaultRolloverStrategy:
              max: "99"


      Loggers:
        AsyncLogger:
          - name: "oracle.communication.brm.charging.appconfiguration"
            level: {{ .Values.log4j2.logger.appconfiguration | quote}}
          - name: "oracle.communication.brm.charging.balance"
            level: {{ .Values.log4j2.logger.balance | quote}}
          - name: "oracle.communication.brm.charging.brs"
            level: {{ .Values.log4j2.logger.brs | quote}}
          - name: "oracle.communication.brm.charging.brs.diagnostics"
            level: {{ .Values.log4j2.logger.brsDiagnostics | quote}}
          - name: "oracle.communication.brm.charging.diametergateway.cdrtrace"
            level: {{ .Values.log4j2.logger.diametergatewayCdrtrace | quote}}
          - name: "oracle.communication.brm.charging.ecs.cdrtrace"
            level: {{ .Values.log4j2.logger.ecsCdrtrace | quote}}
          - name: "oracle.communication.brm.charging.config"
            level: {{ .Values.log4j2.logger.config | quote}}
          - name: "oracle.communication.brm.charging.customer"
            level: {{ .Values.log4j2.logger.customer | quote}}
          - name: "oracle.communication.brm.charging.dsl"
            level: {{ .Values.log4j2.logger.dsl | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.diameter.framework"
            level: {{ .Values.log4j2.logger.ecegatewayDiameterFramework | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.diameter.gy"
            level: {{ .Values.log4j2.logger.ecegatewayDiameterGy | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.diameter.launcher"
            level: {{ .Values.log4j2.logger.ecegatewayDiameterLauncher | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.diameter.sh"
            level: {{ .Values.log4j2.logger.ecegatewayDiameterSh | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.diameter.sy"
            level: {{ .Values.log4j2.logger.ecegatewayDiameterSy | quote}}
          - name: "oracle.communication.brm.charging.diameter.tekelec"
            level: {{ .Values.log4j2.logger.diameterTekelec | quote}}
          - name: camiant
            level: {{ .Values.log4j2.logger.camiant | quote}}
          - name: "camiant.diameter.apps"
            level: {{ .Values.log4j2.logger.camiantDiameterApps | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.radius"
            level: {{ .Values.log4j2.logger.ecegatewayRadius | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.http.server"
            level: {{ .Values.log4j2.logger.ecegatewayHttpServer | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.cdr"
            level: {{ .Values.log4j2.logger.ecegatewayCdr | quote}}
          - name: "oracle.communication.brm.charging.cdr.formatter"
            level: {{ .Values.log4j2.logger.cdrFormatter | quote}}
          - name: "oracle.communication.brm.charging.cdr.formatterplugin"
            level: {{ .Values.log4j2.logger.cdrFormatterPlugin | quote}}
          - name: "oracle.communication.brm.charging.extensions"
            level: {{ .Values.log4j2.logger.extensions | quote}}
          - name: "oracle.communication.brm.charging.federation.client"
            level: {{ .Values.log4j2.logger.federationClient | quote}}
          - name: "oracle.communication.brm.charging.federation.interceptor"
            level: {{ .Values.log4j2.logger.federationInterceptor | quote}}
          - name: "oracle.communication.brm.charging.identity"
            level: {{ .Values.log4j2.logger.identity | quote}}
          - name: "oracle.communication.brm.charging.integrations.brmgateway"
            level: {{ .Values.log4j2.logger.brmgateway | quote}}
          - name: "oracle.communication.brm.charging.integrations.brmpoid"
            level: DEBUG
          - name: "oracle.communication.brm.charging.integrations.emgateway"
            level: {{ .Values.log4j2.logger.emgateway | quote}}
          - name: "org.apache.kafka"
            level: {{ .Values.log4j2.logger.kafka | quote}}
          - name: "oracle.communication.brm.charging.messages.framework"
            level: {{ .Values.log4j2.logger.messagesFramework | quote}}
          - name: "oracle.communication.brm.charging.messages.management"
            level: {{ .Values.log4j2.logger.messagesManagement | quote}}
          - name: "oracle.communication.brm.charging.messages.query"
            level: {{ .Values.log4j2.logger.messagesQuery | quote}}
          - name: "oracle.communication.brm.charging.messages.update"
            level: {{ .Values.log4j2.logger.messagesUpdate | quote}}
          - name: "oracle.communication.brm.charging.messages.usage"
            level: {{ .Values.log4j2.logger.messagesUsage | quote}}
          - name: "oracle.communication.brm.charging.migration.config"
            level: {{ .Values.log4j2.logger.migrationConfig | quote}}
          - name: "oracle.communication.brm.charging.migration.crossref"
            level: {{ .Values.log4j2.logger.migrationCrossref | quote}}
          - name: "oracle.communication.brm.charging.migration.customer.loader"
            level: {{ .Values.log4j2.logger.customerLoader | quote}}
          - name: "oracle.communication.brm.charging.migration.customer.updater"
            level: {{ .Values.log4j2.logger.customerUpdater | quote}}
          - name: "oracle.communication.brm.charging.migration.pricing.loader"
            level: {{ .Values.log4j2.logger.pricingLoader | quote}}
          - name: "oracle.communication.brm.charging.migration.pricing.updater"
            level: {{ .Values.log4j2.logger.pricingUpdater | quote}}
          - name: "oracle.communication.brm.charging.notification"
            level: {{ .Values.log4j2.logger.notification | quote}}
          - name: "oracle.communication.brm.charging.orchestration.charging.requestenrichment"
            level: {{ .Values.log4j2.logger.requestenrichment | quote}}
          - name: "oracle.communication.brm.charging.orchestration.common"
            level: {{ .Values.log4j2.logger.orchestrationCommon | quote}}
          - name: "oracle.communication.brm.charging.orchestration.framework"
            level: {{ .Values.log4j2.logger.orchestrationFramework | quote}}
          - name: "oracle.communication.brm.charging.orchestration.management"
            level: {{ .Values.log4j2.logger.orchestrationManagement | quote}}
          - name: "oracle.communication.brm.charging.orchestration.query"
            level: {{ .Values.log4j2.logger.orchestrationQuery | quote}}
          - name: "oracle.communication.brm.charging.orchestration.subscription"
            level: {{ .Values.log4j2.logger.orchestrationSubscription | quote}}
          - name: "oracle.communication.brm.charging.orchestration.update"
            level: {{ .Values.log4j2.logger.orchestrationUpdate | quote}}
          - name: "oracle.communication.brm.charging.orchestration.usage"
            level: {{ .Values.log4j2.logger.orchestrationUsage | quote}}
          - name: "oracle.communication.brm.charging.pdcspecgen"
            level: {{ .Values.log4j2.logger.pdcspecgen | quote}}
          - name: "oracle.communication.brm.charging.pricing"
            level: {{ .Values.log4j2.logger.pricing | quote}}
          - name: "oracle.communication.brm.charging.processor.framework"
            level: {{ .Values.log4j2.logger.processorFramework | quote}}
          - name: "oracle.communication.brm.charging.processor.management"
            level: {{ .Values.log4j2.logger.processorManagement | quote}}
          - name: "oracle.communication.brm.charging.processor.update"
            level: {{ .Values.log4j2.logger.processorUpdate | quote}}
          - name: "oracle.communication.brm.charging.processor.usage"
            level: {{ .Values.log4j2.logger.processorUsage | quote}}
          - name: "oracle.communication.brm.charging.product"
            level: {{ .Values.log4j2.logger.product | quote}}
          - name: "oracle.communication.brm.charging.ratedevent.dao"
            level: {{ .Values.log4j2.logger.ratedeventDao | quote}}
          - name: "oracle.communication.brm.charging.ratedevent.formatter"
            level: {{ .Values.log4j2.logger.ratedeventFormatter | quote}}
          - name: "oracle.communication.brm.charging.ratedevent.formatterplugin"
            level: {{ .Values.log4j2.logger.ratedeventFormatterPlugin | quote}}
          - name: "oracle.communication.brm.charging.ratedevent.purgeratedevent"
            level: {{ .Values.log4j2.logger.ratedeventPurgeratedevent | quote}}
          - name: "oracle.communication.brm.charging.ratedevent.service"
            level: {{ .Values.log4j2.logger.ratedeventService | quote}}
          - name: "oracle.communication.brm.charging.processor.ratedeventtrace"
            level: {{ .Values.log4j2.logger.ratedeventtrace | quote}}
          - name: "oracle.communication.brm.charging.rating"
            level: {{ .Values.log4j2.logger.rating | quote}}
          - name: "oracle.communication.brm.charging.rating.charge"
            level: {{ .Values.log4j2.logger.ratingCharge | quote}}
          - name: "oracle.communication.brm.charging.rating.alteration"
            level: {{ .Values.log4j2.logger.ratingAlteration | quote}}
          - name: "oracle.communication.brm.charging.rating.distribution"
            level: {{ .Values.log4j2.logger.ratingDistribution | quote}}
          - name: "oracle.communication.brm.charging.server"
            level: {{ .Values.log4j2.logger.server | quote}}
          - name: "oracle.communication.brm.charging.session"
            level: {{ .Values.log4j2.logger.session | quote}}
          - name: "oracle.communication.brm.charging.sharingagreement"
            level: {{ .Values.log4j2.logger.sharingagreement | quote}}
          - name: "oracle.communication.brm.charging.statemanager"
            level: {{ .Values.log4j2.logger.statemanager | quote}}
          - name: "oracle.communication.brm.charging.subscribertrace.configuration"
            level: {{ .Values.log4j2.logger.subscribertraceConfiguration | quote}}
          - name: "oracle.communication.brm.charging.subscribertrace.log"
            level: {{ .Values.log4j2.logger.subscribertraceLog | quote}}
          - name: "oracle.communication.brm.charging.monitor.framework"
            level: {{ .Values.log4j2.logger.monitorFramework | quote}}
          - name: "oracle.communication.brm.charging.monitor.agent"
            level: {{ .Values.log4j2.logger.monitorAgent | quote}}
          - name: "oracle.communication.brm.charging.monitor.configuration"
            level: {{ .Values.log4j2.logger.monitorConfiguration | quote}}
          - name: "oracle.communication.brm.charging.monitor.utils"
            level: {{ .Values.log4j2.logger.monitorUtils | quote}}
          - name: "oracle.communication.brm.charging.cachepersistence.dao"
            level: {{ .Values.log4j2.logger.cachepersistenceDao | quote}}
          - name: "oracle.communication.brm.charging.cachepersistence.reload"
            level: {{ .Values.log4j2.logger.cachepersistenceReload | quote}}
          - name: "oracle.communication.brm.charging.cachepersistence.persist"
            level: {{ .Values.log4j2.logger.cachepersistencePersist | quote}}
          - name: "oracle.communication.brm.charging.cachepersistence.data"
            level: {{ .Values.log4j2.logger.cachepersistenceData | quote}}
          - name: "oracle.communication.brm.charging.cachepersistence.util"
            level: {{ .Values.log4j2.logger.cachepersistenceUtil | quote}}
          - name: "oracle.communication.brm.charging.tools.lpr"
            level: {{ .Values.log4j2.logger.toolsLpr | quote}}
          - name: "oracle.communication.brm.charging.tools"
            level: {{ .Values.log4j2.logger.tools | quote}}
          - name: "oracle.communication.brm.charging.util.highavailability2"
            level: {{ .Values.log4j2.logger.highavailability2 | quote}}
          - name: "oracle.communication.brm.charging.transports"
            level: {{ .Values.log4j2.logger.transports | quote}}
          - name: "oracle.communication.brm.charging.util"
            level: {{ .Values.log4j2.logger.util | quote}}
          - name: Coherence
            level: {{ .Values.log4j2.logger.Coherence | quote}}
          - name: "org.springframework"
            level: {{ .Values.log4j2.logger.springframework | quote}}

          - name: "oracle.communication.brm.charging.monitor.summary"
            level: {{ .Values.log4j2.logger.monitorSummary | quote}}
            additivity: false
            AppenderRef:
             - ref: ECE_SUMMARY_REPORT

          - name: "oracle.communication.brm.charging.monitor.alert"
            level: {{ .Values.log4j2.logger.monitorAlert | quote}}
            additivity: false
            AppenderRef:
              - ref: ECE_ALERT_REPORT

          - name: "com.oracle.brm.rated_event_manager"
            level: {{ .Values.log4j2.logger.brmRatedeventmanager | quote}}
          - name: "com.oracle.brm.rated_event_manager.diagnostic"
            level: {{ .Values.log4j2.logger.brmRatedeventmanagerDiagnostic | quote}}
            additivity: false
            AppenderRef:
              - ref: REM_DIAG

        AsyncRoot:
          level: {{ .Values.log4j2.logger.root | quote}}
          AppenderRef:
            - ref: ECE_LOG
            - ref: Console
  charging-coherence-override-dev.xml: |
    <?xml version="1.0" encoding="windows-1252" ?>
    <!-- All coherence configuration should be taken from this file -->
    <!-- Point to this file via -Dtangosol.coherence.override=charging-coherence-override-dev.xml-->
    <coherence>
        <cluster-config>
            <service-guardian>
                <timeout-milliseconds>3600000</timeout-milliseconds>
            </service-guardian>
            <member-identity>
                <cluster-name system-property="tangosol.coherence.cluster">{{ .Values.charging.clusterName }}</cluster-name>
            </member-identity>

            <!-- ECE persistence environment -->
            <persistence-environments>
                <persistence-environment id="ece-environment">
                    <persistence-mode system-property="ece.persistence.mode">on-demand</persistence-mode>
                </persistence-environment>
            </persistence-environments>

            <packet-publisher>
                <packet-delivery>
                    <timeout-milliseconds>300000</timeout-milliseconds>
                </packet-delivery>
            </packet-publisher>


            <cluster-quorum-policy>
                <timeout-survivor-quorum role="OracleCommunicationBrmChargingServerChargingLauncher">
                    {{- if and (.Values.charging.chargingServerWorkerNodes) (gt (atoi .Values.charging.chargingServerWorkerNodes) 1) }}
                    {{ mul (sub .Values.charging.chargingServerWorkerNodes 1) (div (add .Values.charging.ecs.replicas .Values.charging.ecs1.replicas) (.Values.charging.chargingServerWorkerNodes)) }}
                    {{- else }}
                    {{ .Values.charging.timeoutSurvivorQuorum }}
                    {{- end }}
                </timeout-survivor-quorum>
            </cluster-quorum-policy>

            <services>
                <service id="1">
                    <init-params>
                        <init-param id="2222">
                            <param-name>graveyard-size</param-name>
                            <param-value>0</param-value>
                        </init-param>
                    </init-params>
                </service>
            </services>

            <serializers>
                <serializer id="pof">
                    <class-name>com.tangosol.io.pof.ConfigurablePofContext</class-name>
                    <init-params>
                        <init-param>
                            <param-type>String</param-type>
                            <param-value system-property="tangosol.pof.config">charging-pof-config.xml</param-value>                            
                        </init-param>
                    </init-params>
                </serializer>
            </serializers>
        </cluster-config>

        <logging-config>
            <destination system-property="tangosol.coherence.log">log4j2</destination>
            <severity-level system-property="tangosol.coherence.log.level">9</severity-level>
            <message-format>Oracle Coherence {version} (thread={thread}, member={member}): {text}</message-format>
        </logging-config>

        <configurable-cache-factory-config>
            <class-name>com.tangosol.net.ExtensibleConfigurableCacheFactory</class-name>
            <init-params>
                <init-param>
                    <param-type>java.lang.String</param-type>
                    {{- if eq .Values.charging.persistenceEnabled "true" }}
                    {{- if eq .Values.charging.isFederation "true" }}
                    <param-value system-property="tangosol.coherence.cacheconfig">charging-cache-config-federation-persistence.xml</param-value>
                    {{- else }}
                    <param-value system-property="tangosol.coherence.cacheconfig">charging-cache-config-persistence.xml</param-value>
                    {{- end }}
                    {{- else }}
                    {{- if eq .Values.charging.isFederation "true" }}
                    <param-value system-property="tangosol.coherence.cacheconfig">charging-cache-config-federation.xml</param-value>
                    {{- else }}
                    <param-value system-property="tangosol.coherence.cacheconfig">charging-cache-config.xml</param-value>
                    {{- end }}
                    {{- end }}
                </init-param>
            </init-params>
        </configurable-cache-factory-config>

        <management-config>
            <read-only system-property="tangosol.coherence.management.readonly">false</read-only>
            <reporter>
                <configuration system-property="tangosol.coherence.management.report.configuration">reports/report-all.xml</configuration>
            </reporter>
        </management-config>
       
        {{- if eq .Values.charging.isFederation "true" }}
        <federation-config>
            <participants>
              <participant>
                <name system-property="primary.cluster">{{ .Values.charging.cluster.primary.clusterName }}</name>
                {{- if eq .Values.charging.secondaryCluster "true" }}
                <initial-action>stop</initial-action>
                {{- else }}
                <initial-action>start</initial-action>
                {{- end }}
                <remote-addresses>
                  <socket-address>
                    <address system-property="primary.cluster.host">{{ .Values.charging.cluster.primary.eceServicefqdnOrExternalIP }}</address>
                    <port    system-property="primary.cluster.port">{{ .Values.charging.federatedCacheScheme.federationPort.brmfederated }}</port>
                  </socket-address>
                  <socket-address>
                    <address system-property="primary.cluster.host">{{ .Values.charging.cluster.primary.eceServicefqdnOrExternalIP }}</address>
                    <port    system-property="primary.cluster.port">{{ .Values.charging.federatedCacheScheme.federationPort.xreffederated }}</port>
                  </socket-address>
                  <socket-address>
                    <address system-property="primary.cluster.host">{{ .Values.charging.cluster.primary.eceServicefqdnOrExternalIP }}</address>
                    <port    system-property="primary.cluster.port">{{ .Values.charging.federatedCacheScheme.federationPort.replicatedfederated }}</port>
                  </socket-address>
                  <socket-address>
                    <address system-property="primary.cluster.host">{{ .Values.charging.cluster.primary.eceServicefqdnOrExternalIP }}</address>
                    <port    system-property="primary.cluster.port">{{ .Values.charging.federatedCacheScheme.federationPort.offerProfileFederated }}</port>
                  </socket-address>
                </remote-addresses>
              </participant>
              {{ range $key, $value := .Values.charging.cluster.secondary }}
              <participant>
                <name system-property="secondary.cluster">{{ $value.clusterName }}</name>
                {{- if eq $.Values.charging.secondaryCluster "true" }}
                <initial-action>start</initial-action>
                {{- else }}
                <initial-action>stop</initial-action>
                {{- end }}
                <remote-addresses>
                  <socket-address>
                    <address system-property="secondary.cluster.host">{{ $value.eceServicefqdnOrExternalIP }}</address>
                    <port    system-property="secondary.cluster.port">{{ $.Values.charging.federatedCacheScheme.federationPort.brmfederated }}</port>
                  </socket-address>
                  <socket-address>
                    <address system-property="secondary.cluster.host">{{ $value.eceServicefqdnOrExternalIP }}</address>
                    <port    system-property="secondary.cluster.port">{{ $.Values.charging.federatedCacheScheme.federationPort.xreffederated }}</port>
                  </socket-address>
                  <socket-address>
                    <address system-property="secondary.cluster.host">{{ $value.eceServicefqdnOrExternalIP }}</address>
                    <port    system-property="secondary.cluster.port">{{ $.Values.charging.federatedCacheScheme.federationPort.replicatedfederated }}</port>
                  </socket-address>
                  <socket-address>
                    <address system-property="secondary.cluster.host">{{ $value.eceServicefqdnOrExternalIP }}</address>
                    <port    system-property="secondary.cluster.port">{{ $.Values.charging.federatedCacheScheme.federationPort.offerProfileFederated }}</port>
                  </socket-address>
                </remote-addresses>
              </participant>
              {{ end }}
            </participants>
            {{- if .Values.charging.clusterTopology }}
            <topology-definitions>
              {{- if eq .Values.charging.clusterTopology "active-active" }}
              <active-active>
                <name>Active</name>
                <active system-property="primary.cluster">{{ .Values.charging.cluster.primary.clusterName }}</active>
                {{ range $key, $value := .Values.charging.cluster.secondary }}
                <active system-property="secondary.cluster">{{ $value.clusterName }}</active>
                {{ end }}
              </active-active>
              {{- end }}
              {{- if eq .Values.charging.clusterTopology "active-passive" }}
              <active-passive>
                <name>Active</name>
                <active system-property="primary.cluster">{{ .Values.charging.cluster.primary.clusterName }}</active>
                {{ range $key, $value := .Values.charging.cluster.secondary }}
                <passive system-property="secondary.cluster">{{ $value.clusterName }}</passive>
                {{ end }}
              </active-passive>
              {{- end }}
            </topology-definitions>
            {{- end }}
        </federation-config>
        {{- else }}
        <federation-config>
            <participants>
                <participant>
                    <name system-property="tangosol.coherence.cluster">{{ .Values.charging.clusterName | quote}}</name>
                    <remote-addresses>
                        <socket-address>
                            <address>237.12.13.17</address>
                            <port>15000</port>
                        </socket-address>
                    </remote-addresses>
                </participant>
            </participants>
        </federation-config>
        {{- end }}
    </coherence>

  JMSConfiguration.xml: |
    <MessagesConfigurations>
        {{ range $key, $value := .Values.JMSConfiguration.NotificationQueue }}
        {{- with $outer }}
        <JMSDestination name="NotificationQueue">
            <HostName>{{ if (include "ecejmshostname" .) -}} {{ (include "ecejmshostname" .) }} {{- else -}} {{ $value.HostName }} {{- end }}</HostName>
            <Port>{{ if (include "ecejmsport" .) -}} {{ (include "ecejmsport" .) }} {{- else -}} {{ $value.Port }} {{- end }}</Port>
            <UserName>{{ if (include "ecejmsusername" .) -}} {{ (include "ecejmsusername" .) }} {{- else -}}  {{ $value.UserName }} {{- end }}</UserName>
            <ConnectionFactory>ECE/NotificationFactory</ConnectionFactory>
            <QueueName>ECE/NotificationTopic</QueueName>
            <Protocol>{{ if (include "ecejmsprotocol" .) -}} {{ (include "ecejmsprotocol" .) }} {{- else -}}  {{ $value.Protocol }} {{- end }}</Protocol>
            <ConnectionURL>{{ if (include "ecejmsconnectionurl" .) -}} {{ (include "ecejmsconnectionurl" .) }} {{- else -}}  {{ $value.ConnectionURL }} {{- end }}</ConnectionURL>
            <ConnectionRetryCount>{{ $value.ConnectionRetryCount }}</ConnectionRetryCount>
            <ConnectionRetrySleepInterval>10000</ConnectionRetrySleepInterval>
            <InitialContextFactory>weblogic.jndi.WLInitialContextFactory</InitialContextFactory>
            <RequestTimeOut>3000</RequestTimeOut>
            <KeyStoreLocation>{{ $value.KeyStoreLocation }}</KeyStoreLocation>
            <EceWalletLocation>{{ $value.EceWalletLocation }}</EceWalletLocation>
            <Cluster>{{ $value.Cluster }}</Cluster>
        </JMSDestination>
        {{- end }}
        {{ end }}
        {{ range $key, $value := .Values.JMSConfiguration.BRMGatewayNotificationQueue }}
        {{- with $outer }}
        <JMSDestination name="BRMGatewayNotificationQueue">
            <HostName>{{ if (include "ecejmshostname" .) -}} {{ (include "ecejmshostname" .) }} {{- else -}} {{ $value.HostName }} {{- end }}</HostName>
            <Port>{{ if (include "ecejmsport" .) -}} {{ (include "ecejmsport" .) }} {{- else -}} {{ $value.Port }} {{- end }}</Port>
            <UserName>{{ if (include "ecejmsusername" .) -}} {{ (include "ecejmsusername" .) }} {{- else -}}  {{ $value.UserName }} {{- end }}</UserName>
            <ConnectionFactory>ECE/NotificationFactory</ConnectionFactory>
            <QueueName>ECE/NotificationTopic</QueueName>
            <SuspenseQueue>ECE/SuspenseQueue</SuspenseQueue>
            <Protocol>{{ if (include "ecejmsprotocol" .) -}} {{ (include "ecejmsprotocol" .) }} {{- else -}}  {{ $value.Protocol }} {{- end }}</Protocol>
            <ConnectionURL>{{ if (include "ecejmsconnectionurl" .) -}} {{ (include "ecejmsconnectionurl" .) }} {{- else -}}  {{ $value.ConnectionURL }} {{- end }}</ConnectionURL>
            <ConnectionRetryCount>10</ConnectionRetryCount>
            <ConnectionRetrySleepInterval>10000</ConnectionRetrySleepInterval>
            <InitialContextFactory>weblogic.jndi.WLInitialContextFactory</InitialContextFactory>
            <RequestTimeOut>3000</RequestTimeOut>
            <KeyStoreLocation>{{ $value.KeyStoreLocation }}</KeyStoreLocation>
            <EceWalletLocation>{{ $value.EceWalletLocation }}</EceWalletLocation>
            <Cluster>{{ $value.Cluster }}</Cluster>
        </JMSDestination>
        {{- end }}
        {{ end }}
        {{ range $key, $value := .Values.JMSConfiguration.DiameterGatewayNotificationQueue }}
        {{- with $outer }}
        <JMSDestination name="DiameterGatewayNotificationQueue">
            <HostName>{{ if (include "ecejmshostname" .) -}} {{ (include "ecejmshostname" .) }} {{- else -}} {{ $value.HostName }} {{- end }}</HostName>
            <Port>{{ if (include "ecejmsport" .) -}} {{ (include "ecejmsport" .) }} {{- else -}} {{ $value.Port }} {{- end }}</Port>
            <UserName>{{ if (include "ecejmsusername" .) -}} {{ (include "ecejmsusername" .) }} {{- else -}}  {{ $value.UserName }} {{- end }}</UserName>
            <ConnectionFactory>ECE/NotificationFactory</ConnectionFactory>
            <QueueName>ECE/NotificationTopic</QueueName>
            <Protocol>{{ if (include "ecejmsprotocol" .) -}} {{ (include "ecejmsprotocol" .) }} {{- else -}}  {{ $value.Protocol }} {{- end }}</Protocol>
            <ConnectionURL>{{ if (include "ecejmsconnectionurl" .) -}} {{ (include "ecejmsconnectionurl" .) }} {{- else -}}  {{ $value.ConnectionURL }} {{- end }}</ConnectionURL>
            <ConnectionRetryCount>10</ConnectionRetryCount>
            <ConnectionRetrySleepInterval>10000</ConnectionRetrySleepInterval>
            <InitialContextFactory>weblogic.jndi.WLInitialContextFactory</InitialContextFactory>
            <RequestTimeOut>3000</RequestTimeOut>
            <KeyStoreLocation>{{ $value.KeyStoreLocation }}</KeyStoreLocation>
            <EceWalletLocation>{{ $value.EceWalletLocation }}</EceWalletLocation>
            <Cluster>{{ $value.Cluster }}</Cluster>
        </JMSDestination>
        {{- end }}
        {{ end }}
    </MessagesConfigurations>

  {{ range $value := list "charging-cache-config.xml" "charging-cache-config-federation.xml" }}
  {{ print $value }}: |
    <?xml version="1.0"?>
    <cache-config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xmlns="http://xmlns.oracle.com/coherence/coherence-cache-config"
              xmlns:c="class://oracle.communication.brm.charging.util.coherence.CqcNamespaceHandler"
              xsi:schemaLocation="http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd">
    <defaults>
        <serializer>pof</serializer>
    </defaults>
    <caching-scheme-mapping>
        <cache-mapping>
            <cache-name>HighAvailability</cache-name>
            <scheme-name>system-distributed</scheme-name>
        </cache-mapping>

        <!--
        Caches with any name will be created as on heap partitioned with
        cachestore.
        -->
        <cache-mapping>
            <cache-name>PublicUserIdentity</cache-name>
            <scheme-name>near-federated</scheme-name>
            <init-params>
                <init-param>
                    <param-name>transient</param-name>
                    <param-value>true</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>PublicUserIdentityKey</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>PublicUserIdentity</param-value>
                </init-param>
                <init-param>
                    <param-name>key-only</param-name>
                    <param-value>true</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <!-- The scheme-name of the RatedEvent must be the same as for the distributed Customer
              - - The RatedEvent and dist-Customer uses KeyAssociation and they must use the same service
              - - for KeyAssociation to work.
              - - The size of RatedEvent cache store is determined by the expire-delay and back-size-limit.
              - - For a throughput of 1000 rated events per second for 5 minutes, roughly 600MB is required for
              - - the RatedEvent cache store.
              - - The cache-store configuration entry setting oracle.communication.brm.charging.util.coherence.internal.NoPersistenceCacheStore
              - - does not persist the rated events.
              - - To enable persisting rated events, cache-store configuration entry must be changed to
              - - oracle.communication.brm.charging.ratedevent.publisher.internal.coherence.RatedEventPublisher
              - -
              - -
              - - NOTE : The expiry delay value in the RatedEvent cache should match the corresponding value in the ServiceContext cache
              - -
              - -
            -->
            <cache-name>RatedEvent</cache-name>
            <scheme-name>default-federated-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value>5m</param-value>
                </init-param>
                <init-param>
                    <param-name>write-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
                <init-param>
                    <param-name>cache-store</param-name>
                    <param-value>oracle.communication.brm.charging.ratedevent.publisher.internal.coherence.RatedEventPublisher</param-value>
                    <!--<param-value>oracle.communication.brm.charging.ratedevent.publisher.internal.coherence.SimpleFileBasedRatedEventPublisher</param-value>-->
                    <!--param-value>oracle.communication.brm.charging.util.coherence.internal.NoPersistenceCacheStore</param-value>-->
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value>600MB</param-value>
                </init-param>
            </init-params>
            <federated>false</federated>
        </cache-mapping>
        <cache-mapping>
            <!-- The scheme-name of the ServiceContext must be the same as for the distributed Customer
              - - The ServiceContext and dist-Customer uses KeyAssociation and they must use the same service
              - - for KeyAssociation to work.
              - - For a throughput of 1000 rated events per second for 5 minutes, roughly 600MB is required for
              - - the ServiceContext cache store.
              - - The cache-store configuration entry setting oracle.communication.brm.charging.util.coherence.internal.NoPersistenceCacheStore
              - - does not publish service events.
              - - To enable publishing, cache-store configuration entry must be changed to
              - - oracle.communication.brm.charging.notification.internal.coherence.AsynchronousNotificationPublisher
              - -
              - -
              - - NOTE : The expiry delay value in the RatedEvent cache should match the corresponding value in the ServiceContext cache
              - -
              - -
            -->
            <cache-name>ServiceContext</cache-name>
            <scheme-name>default-federated-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value>30m</param-value>
                </init-param>
                <init-param>
                    <param-name>write-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
                <init-param>
                    <param-name>cache-store</param-name>
                    <param-value>oracle.communication.brm.charging.notification.internal.coherence.AsynchronousNotificationPublisher</param-value>
                    <!--param-value>oracle.communication.brm.charging.util.coherence.internal.NoPersistenceCacheStore</param-value-->
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value>600MB</param-value>
                </init-param>
            </init-params>
            <federated>true</federated>
        </cache-mapping>
        <cache-mapping>
            <cache-name>RumDefinition</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedRumDefinition</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>CryptKeys</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedCryptKeys</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>EvolvableCommandChain</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedEvolvableCommandChain</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DslExpression</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedDslExpression</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>PriceModelSelectorResult</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedPriceModelSelectorResult</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ChargeOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedChargeOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>PriceModel</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedPriceModel</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AlterationOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedAlterationOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AlterationRatePlan</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedAlterationRatePlan</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>RatePlanSelector</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedRatePlanSelector</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DistributionOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedDistributionOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DistributionRatePlan</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedDistributionRatePlan</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ChargeRatePlan</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedChargeRatePlan</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>CreditProfile</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedCreditProfile</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>NotificationDeliveryMethod</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedNotificationDeliveryMethod</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>BusinessProfile</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedBusinessProfile</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ItemAnalyzer</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedItemAnalyzer</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DynamicQuotaConfiguration</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedDynamicQuotaConfiguration</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>BalanceElement</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedBalanceElement</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>BalanceElementIndex</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedBalanceElementIndex</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>RequestSpecification</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedRequestSpecification</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>NetworkMappingSpecification</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedNetworkMappingSpecification</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ResponseSpecification</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedResponseSpecification</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DiameterMediationTable</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedDiameterMediationTable</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AppConfiguration</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedAppConfiguration</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ZoneModel</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedZoneModel</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ProfileAttributeSpec</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedProfileAttributeSpec</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>GlobalCacheVersion</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedGlobalCacheVersion</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>OfferProfile</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>FederatedOfferProfile</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>TaxConfig</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedTaxConfig</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>TaxExemptionConfig</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedTaxExemptionConfig</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>Extensions</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedExtensions</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>State</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedState</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>Customer</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>NotificationMetaData</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ActiveSession</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>Balance</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>RecurringBundleIdHistory</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>BillingTriggerCycleInfo</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>SharingCustomerLock</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>CustomerInBrmTransactionLock</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>CustomerGroup</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
         </cache-mapping>
        <cache-mapping>
            <cache-name>SharingCustomerState</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>TopUpHistory</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>SystemStore</cache-name>
            <scheme-name>xref-distributed</scheme-name>
        </cache-mapping>
        <!-- The scheme name for the poid id cache SHOULD NOT be the same as customer
        else it will lead to dead-lock
        -->
        <cache-mapping>
            <cache-name>PoidId</cache-name>
            <scheme-name>poidId-distributed</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>PDCXref</cache-name>
            <scheme-name>near-federated</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>PDCNameMapping</cache-name>
            <scheme-name>near-federated</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AttributeSpec</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedAttributeSpec</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AttributeSpecTableMetadata</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedAttributeSpecTableMetadata</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DomainObjectSpecification</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedDomainObjectSpecification</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ChargeSystemOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedChargeSystemOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AlterationSystemOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedAlterationSystemOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DistributionAggregationOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedDistributionAggregationOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <!-- Cache service to hold concurrent rated events; the entries are held with key association -->
        <cache-mapping>
            <cache-name>RatedEventInRerating</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <!-- Cache service to hold concurrent service events; the entries are held with key association -->
        <cache-mapping>
            <cache-name>ServiceContextInRerating</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <!-- Cache service to hold backout status of concurrent rated events; the entries are held with key association -->
        <cache-mapping>
            <cache-name>RerateBackoutStatus</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>
        <!--Cache service to hold parts of sy session which need to be persisted for diameter gateway -->
        <cache-mapping>
            <cache-name>DiameterPersistedSySessionStore</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>ReplicatedFederatedAppConfiguration</cache-name>
            <scheme-name>replicated-federated</scheme-name>
            <init-params>
                <init-param>
                    <param-name>transient</param-name>
                    <param-value>true</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>ReplicatedFederatedState</cache-name>
            <scheme-name>replicated-federated</scheme-name>
            <init-params>
                <init-param>
                    <param-name>transient</param-name>
                    <param-value>true</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>ReplicatedFederated*</cache-name>
            <scheme-name>replicated-federated</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>FederatedOffer*</cache-name>
            <scheme-name>offer-profile-federated</scheme-name>
        </cache-mapping>

        <!--
        - Aggregate Object for Usage Flow.
        - This cache would be used for persisting objects like
        - Customer, Balance, RatedEvent, RecurringBundleIdHistory
        - in the same transaction. This would be used for persisting data
        - during the usage flow.
        - For Realtime/Convergent deployment this cache should be configured as write-through
        - For Batch deployment this cache should be configured as write behind.
        -->
        <cache-mapping>
            <cache-name>AggregateObjectUsage</cache-name>
            <scheme-name>default-federated-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
                <!--
                - The parameter below decides if this cache is to operate as
                - write-through (Synchronous) or write-behind(Asynchronous with a write behind queue).
                -
                - For Realtime/Convergent deployment - The parameter "write-delay" should have a value that is non-zero, making it a write-behind cache.
                - For Batch deployment - The parameter "write-delay" should be set as '0', making it a write-through cache.
                -->
                <init-param>
                    <param-name>write-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
                <init-param>
                    <param-name>cache-store</param-name>
                    <param-value>
                        oracle.communication.brm.charging.util.coherence.internal.NoPersistenceAggregateCacheStore
                    </param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value>500MB</param-value>
                </init-param>
            </init-params>
            <federated>false</federated>
        </cache-mapping>

        <cache-mapping>
            <!--
            - Aggregate Object for Update Flow.
            -
            - This cache would be used during the Customer creation/modification flow.
            - This cache is configured as write-through (Synchronous).
            -->
            <cache-name>AggregateObjectUpdate</cache-name>
            <scheme-name>default-federated-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>cache-store</param-name>
                    <param-value>
                        oracle.communication.brm.charging.util.coherence.internal.NoPersistenceAggregateCacheStore
                    </param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value>500MB</param-value>
                </init-param>
            </init-params>
            <federated>false</federated>
        </cache-mapping>

        <cache-mapping>
            <cache-name>RecoveryState</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>

        <!-- Cache Service which holds the status for Persistence, when a Partition and Data Loss happens. -->
        <cache-mapping>
            <cache-name>PersistenceState</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>BrmCheckPoint</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>CacheSizingStatistics</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <!-- Cache service to hold sessionHistory; the entries are held with key association -->
            <cache-name>TerminatedSessionHistory</cache-name>
            <scheme-name>default-federated-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value>5m</param-value>
                </init-param>
                <init-param>
                    <param-name>write-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
                <init-param>
                    <param-name>cache-store</param-name>
                    <param-value>
                        oracle.communication.brm.charging.util.coherence.internal.NoPersistenceCacheStore
                    </param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value>500MB</param-value>
                </init-param>
            </init-params>
            <federated>false</federated>
        </cache-mapping>

        <cache-mapping>
            <cache-name>CustomerPartitionSchemaMapping</cache-name>
            <scheme-name>default-federated-non-expiry</scheme-name>
        </cache-mapping>

    </caching-scheme-mapping>
    <caching-schemes>
        <!--
        Invocation Service scheme.
        -->
        <invocation-scheme>
            <scheme-name>charging-invocation</scheme-name>
            <service-name>InvocationService</service-name>
            <thread-count>33</thread-count>
            <autostart system-property="tangosol.coherence.invocation.autostart">true</autostart>
        </invocation-scheme>

        <invocation-scheme>
            <scheme-name>system-invocation</scheme-name>
            <service-name>SystemInvocationService</service-name>
            <thread-count>10</thread-count>
            <autostart system-property="tangosol.coherence.invocation.autostart">true</autostart>
        </invocation-scheme>

        <local-scheme>
            <scheme-name>expiry-local-scheme</scheme-name>
            <high-units>{back-size-limit 0}</high-units>
            <unit-calculator>BINARY</unit-calculator>
            <expiry-delay>{expiry-delay 0}</expiry-delay>
        </local-scheme>

        <read-write-backing-map-scheme>
            <scheme-name>rw-bm</scheme-name>
            <internal-cache-scheme>
                <local-scheme>
                    <scheme-ref>expiry-local-scheme</scheme-ref>
                </local-scheme>
            </internal-cache-scheme>
            <cachestore-scheme>
                <class-scheme>
                    <class-name>{cache-store}</class-name>
                </class-scheme>
                <operation-bundling>
                    <bundle-config>
                        <operation-name>all</operation-name>
                        <preferred-size>1000</preferred-size>
                        <auto-adjust>true</auto-adjust>
                    </bundle-config>
                </operation-bundling>
            </cachestore-scheme>
            <write-delay>{write-delay 0}</write-delay>
            <write-batch-factor>0.75</write-batch-factor>
            <!-- Specifies the maximum size of the write-behind queue for which failed
                 cache store write operations are re-queued. If the current queue size < threshold then the
                 failed operations are requeued. Keeping it Integer.MAX_VALUE to make sure no updates are lost.
                 Though, a failure could cause OutOfMemoryException but with NoSQL clustered this is a risk
                 worth taking.
              -->
            <write-requeue-threshold>2147483647</write-requeue-threshold>
        </read-write-backing-map-scheme>

        <distributed-scheme>
            <scheme-name>system-distributed</scheme-name>
            <service-name>SystemDistributedCache</service-name>
            <lease-granularity>member</lease-granularity>
            <partition-listener>
                <class-name>oracle.communication.brm.charging.util.highavailability.internal.PartitionLossListener</class-name>
            </partition-listener>
            <backing-map-scheme>
                <local-scheme>
                    <unit-calculator>BINARY</unit-calculator>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <!--
        Default common (parent) distributed distributed scheme.
        -->
        <distributed-scheme>
            <scheme-name>default-distributed</scheme-name>
            <service-name>BRMDistributedCache</service-name>
            <thread-count>4</thread-count>
            <!--compressor>standard</compressor-->
            <partition-count>4093</partition-count>
            <autostart>true</autostart>
        </distributed-scheme>


        <federated-scheme>
            <scheme-name>default-federated-expiry</scheme-name>
            <scheme-ref>default-federated</scheme-ref>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <scheme-ref>rw-bm</scheme-ref>
                    <internal-cache-scheme>
                        <local-scheme>
                            <scheme-ref>expiry-local-scheme</scheme-ref>
                        </local-scheme>
                    </internal-cache-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
        </federated-scheme>



        <!-- used by State -->
        <near-scheme>
            <scheme-name>near-distributed</scheme-name>
            <front-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>20500000</high-units>
                </local-scheme>
            </front-scheme>
            <back-scheme>
                <distributed-scheme>
                    <scheme-ref>xref-distributed</scheme-ref>
                </distributed-scheme>
            </back-scheme>
            <invalidation-strategy>all</invalidation-strategy>
            <autostart>true</autostart>
        </near-scheme>

        <distributed-scheme>
            <scheme-name>xref-distributed</scheme-name>
            <service-name>XRefDistributedCache</service-name>
            <thread-count>1</thread-count>
            <backing-map-scheme>
                <local-scheme>
                    <unit-calculator>BINARY</unit-calculator>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>poidId-distributed</scheme-name>
            <service-name>PoidIdDistributedCache</service-name>
            <thread-count>1</thread-count>
            <backing-map-scheme>
                <local-scheme>
                    <unit-calculator>BINARY</unit-calculator>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <!-- Default common (parent) federated scheme. -->
        <federated-scheme>
            <scheme-name>default-federated</scheme-name>
            <service-name>BRMFederatedCache</service-name>
            <thread-count>4</thread-count>
            <partition-count >4093</partition-count>
            <autostart>true</autostart>
            <interceptors>
                <interceptor>
                    <name>FederatedInterceptor</name>
                    <instance>
                        <class-name>
                            oracle.communication.brm.charging.federation.interceptor.FederatedInterceptor
                        </class-name>
                    </instance>
                </interceptor>
                <interceptor>
                    <name>FederatedServiceContextInterceptor</name>
                    <instance>
                        <class-name>
                            oracle.communication.brm.charging.federation.interceptor.internal.coherence.FederatedServiceContextInterceptor
                        </class-name>
                    </instance>
                </interceptor>
            </interceptors>
            {{ if eq $value "charging-cache-config-federation.xml" }}
            <address-provider>
                <local-address>
                    <address system-property="coherence.extend.address"></address>
                    <port system-property="coherence.federation.port">{{ $.Values.charging.federatedCacheScheme.federationPort.brmfederated }}</port>
                </local-address>
            </address-provider>
            <topologies>
                <topology>
                    <name>Active</name>
                </topology>
            </topologies>
            {{ end }}
        </federated-scheme>

        <federated-scheme>
            <scheme-name>xref-federated</scheme-name>
            <service-name>XRefFederatedCache</service-name>
            <thread-count>1</thread-count>
            <backing-map-scheme>
                <transient>{transient false}</transient>
                <local-scheme>
                    <unit-calculator>BINARY</unit-calculator>
                </local-scheme>
            </backing-map-scheme>
            <persistence>
                <environment>ece-environment</environment>
            </persistence>
            <autostart>true</autostart>
            {{ if eq $value "charging-cache-config-federation.xml" }}
            <address-provider>
                <local-address>
                    <address system-property="coherence.extend.address"></address>
                    <port system-property="coherence.federation.port">{{ $.Values.charging.federatedCacheScheme.federationPort.xreffederated }}</port>
                </local-address>
            </address-provider>
            <topologies>
                <topology>
                    <name>Active</name>
                </topology>
            </topologies>
            {{ end }}
        </federated-scheme>

        <federated-scheme>
            <scheme-name>replicated-federated</scheme-name>
            <service-name>ReplicatedFederatedCache</service-name>
            <thread-count>1</thread-count>
            <backing-map-scheme>
                <transient>{transient false}</transient>
                <local-scheme>
                    <unit-calculator>BINARY</unit-calculator>
                </local-scheme>
            </backing-map-scheme>
            <persistence>
                <environment>ece-environment</environment>
            </persistence>
            <autostart>true</autostart>
            {{ if eq $value "charging-cache-config-federation.xml" }}
            <address-provider>
                <local-address>
                    <address system-property="coherence.extend.address"></address>
                    <port system-property="coherence.federation.port">{{ $.Values.charging.federatedCacheScheme.federationPort.replicatedfederated }}</port>
                </local-address>
            </address-provider>
            <topologies>
                <topology>
                    <name>Active</name>
                </topology>
            </topologies>
            {{ end }}
            <!--<interceptors>-->
                <!--<interceptor>-->
                    <!--<name>AppConfigInterceptor</name>-->
                    <!--<instance>-->
                        <!--<class-name>-->
                            <!--oracle.communication.brm.charging.federation.interceptor.AppConfigInterceptor-->
                        <!--</class-name>-->
                    <!--</instance>-->
                <!--</interceptor>-->
            <!--</interceptors>-->

        </federated-scheme>

        <federated-scheme>
            <scheme-name>offer-profile-federated</scheme-name>
            <service-name>OfferProfileFederatedCache</service-name>
            <thread-count>1</thread-count>
            <backing-map-scheme>
                <local-scheme>
                    <unit-calculator>BINARY</unit-calculator>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            {{ if eq $value "charging-cache-config-federation.xml" }}
            <address-provider>
                <local-address>
                    <address system-property="coherence.extend.address"></address>
                    <port system-property="coherence.federation.port">{{ $.Values.charging.federatedCacheScheme.federationPort.offerProfileFederated }}</port>
                </local-address>
            </address-provider>
            <topologies>
                <topology>
                    <name>Active</name>
                </topology>
            </topologies>
            {{ end }}
        </federated-scheme>

        <!--
               Default non-expiry (child) federated cache scheme.
               -->
        <federated-scheme>
            <scheme-name>default-federated-non-expiry</scheme-name>
            <scheme-ref>default-federated</scheme-ref>
            <backing-map-scheme>
                <local-scheme>
                    <unit-calculator>BINARY</unit-calculator>
                    <unit-factor>1024</unit-factor>
                </local-scheme>
            </backing-map-scheme>
        </federated-scheme>


        <!--near cache for PUI tuned to many entries -->
        <near-scheme>
            <scheme-name>near-federated</scheme-name>
            <front-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>20500000</high-units>
                </local-scheme>
            </front-scheme>
            <back-scheme>
                <federated-scheme>
                    <scheme-ref>xref-federated</scheme-ref>
                </federated-scheme>
            </back-scheme>
            <invalidation-strategy>all</invalidation-strategy>
            <autostart>true</autostart>
        </near-scheme>

        <!--near cache for replicated objects-->
        <near-scheme>
            <scheme-name>near-federated-replicated</scheme-name>
            <front-scheme>
                <local-scheme>
                    <unit-calculator>BINARY</unit-calculator>
                </local-scheme>
            </front-scheme>
            <back-scheme>
                <federated-scheme>
                    <scheme-ref>replicated-federated</scheme-ref>
                </federated-scheme>
            </back-scheme>
            <invalidation-strategy>all</invalidation-strategy>
            <autostart>true</autostart>
        </near-scheme>

        <near-scheme>
            <scheme-name>near-offer-profile-federated</scheme-name>
            <front-scheme>
                <local-scheme>
                    <unit-calculator>BINARY</unit-calculator>
                </local-scheme>
            </front-scheme>
            <back-scheme>
                <federated-scheme>
                    <scheme-ref>offer-profile-federated</scheme-ref>
                </federated-scheme>
            </back-scheme>
            <invalidation-strategy>all</invalidation-strategy>
            <autostart>true</autostart>
        </near-scheme>

        <c:cqc-scheme>
            <c:scheme-name>cqc-scheme</c:scheme-name>
            <c:service-name>CQCService</c:service-name>
            <c:cache-ref>{underlying-cache-name}</c:cache-ref>
            <c:filter>{filter-query null}</c:filter>
            <c:key-only>{key-only false}</c:key-only>
        </c:cqc-scheme>


      </caching-schemes>
    </cache-config>

  {{ end }}


  query.sh: |
       #!/bin/bash
       #
       # This script launches the Coherence query client.
       # ECE data can accessed directly with this client using a SQL like language.
       #
       # Some examples of query on our apps are:
       #
       # CohQL> select key(),value().toString() from Customer where key() = "Cust#6500000001"
       # More examples can be found under CohQL in the Coherence developer documentation.
       #

       # set -x

       ### configuration begin
       ECE_HOME={{ .Values.eceproperties.rootDir }}
       ### configuration end

       JAR_DIR=$ECE_HOME/lib
       CONFIG_DIR={{ .Values.volume.chargingSettingPath }}

       # store arguments in a special array
       args=("$@")
       # get number of elements
       ELEMENTS=${#args[@]}

       USER=
       PASSWD=
       DBQ=0

       usage ()
       {
       cat << EOF
       Usage: $0 - execute CohQL expressions against ECE caches

       GENERAL OPTIONS:
         -h help

       SECURITY OPTIONS:
         -u user
         -p password

       COHERENCE QUERY TOOL OPTIONS:
         -t enable trace mode to print debug information.
         -c Exit the command-line tool after processing the command-line arguments.
            This argument should not be used when redirecting from standard input;
            in which case, the tool exits as soon as the command line arguments are
            finished being processed and the redirected input is never read.
         -s Run the command-line tool in silent mode to remove extraneous verbiage.
            This allows the command line tool to be used in pipes or filters by
            redirecting standard input (<myInput) and standard output (>myOuput).
         -e Run the command-line tool in extended language mode. This mode allows
            object literals in update and insert commands. See the command-line help
            for complete usage information.
         -l <statement> Execute the given statement. Statements must be enclosed in
            single or double quotes. Any number of -l arguments can be used.
         -f <filename> Process the statements in the given file. The statements in
            the file must be separated by a semicolon (;). The file is an operating
            system-dependent path and must be enclosed in single or double quotes.
            Any number of -f arguments can be used.
         -P "SELECT Query" --Run the SQL query against DB. Can select Count() and Value().
            WHERE Clause if present, will support the condition of 'customer_id = 'XXXXX''

       EXAMPLE:

       Query ECE Customer domain object:

       $ ./query.sh -s -c -l 'select key(), value().toString() from Customer where key() = "Cust#6500000241"'

       Query ECE Persistence DB:

       $ ./query.sh -P 'select value() from Customer where Customer_id = "Cust#6500000242"'


       EOF
       }

       for (( i=0;i<$ELEMENTS;i++)); do

           if [ "${args[${i}]}" == '-u' ]; then
              USER=${args[${i}+1]}
           elif [ "${args[${i}]}" == '-p' ]; then
              PASSWD=${args[${i}+1]}
           elif [ "${args[${i}]}" == '-P' ]; then
              DBQ=1
           elif [ "${args[${i}]}" == '-h' ]; then
              usage
              exit
           fi
       done

       #
       # Third party libraries
       #
       SPRING_BEANS=`ls $JAR_DIR/spring-beans*.jar`
       SPRING_CORE=`ls $JAR_DIR/spring-core*.jar`
       SPRING_CONTEXT=`ls $JAR_DIR/spring-context*.jar`
       SPRING_EXP=`ls $JAR_DIR/spring-expression*.jar`
       SPRING_AOP=`ls $JAR_DIR/spring-aop*.jar`

       SPRING_JARS=$SPRING_BEANS:\
       $SPRING_CORE:\
       $SPRING_CONTEXT:\
       $SPRING_EXP:\
       $SPRING_AOP

       APACHE_JARS=$JAR_DIR/log4j-core-2.17.1.jar:\
       $JAR_DIR/log4j-api-2.17.1.jar:\
       $JAR_DIR/log4j-1.2-api-2.17.1.jar:\
       $JAR_DIR/commons-logging-1.2-f4fdecd.jar:\
       $JAR_DIR/commons-configuration2-2.8.0.jar:\
       $JAR_DIR/commons-collections-4.4.jar:\
       $JAR_DIR/commons-beanutils-1.9.4.jar:\
       $JAR_DIR/commons-lang3-3.12.0.jar:\
       $JAR_DIR/commons-text-1.9.jar

       # Scala is used for service specification parsing (request extensibility):
       # - usage_request.spec
       SCALA_JARS=$JAR_DIR/scala-library-2.13.6.jar:\
       $JAR_DIR/scala-parser-combinators_2.13-2.1.0.jar

       # JAVAX Mail is used for encryption support
       JAVAX_MAIL=$JAR_DIR/mail-1.4.7.jar

       #
       # Oracle Coherence libraries
       #
       JLINE=`ls $JAR_DIR/jline*.jar`
       COHERENCE_JARS=$(echo $JAR_DIR/coherence*.jar | tr ' ' ':'):\
       $JLINE:$JAR_DIR/common-2.1.jar:$JAR_DIR/work-1.4.1.jar

       #
       # CGBU BRM ECE libraries
       #
       ECE_JARS=$JAR_DIR/*:\
       $JAR_DIR/ojdbc8.jar:\
       $JAR_DIR/pdcspecgen.jar:\
       $JAR_DIR/pcm-12.0.0.7.0.jar:\
       $JAR_DIR/pcmext-12.0.0.7.0.jar:\
       $JAR_DIR/oraclepki-12.0.0.5.0.jar

       CLASSPATH=$CONFIG_DIR:\
       $SPRING_JARS:\
       $APACHE_JARS:\
       $COHERENCE_JARS:\
       $JAVAX_MAIL:\
       $SCALA_JARS:\
       $ECE_JARS:\
       $JAR_DIR

       JMX_OPTS="{{ .Values.charging.query.jvmJMXOpts }}"
       COHERENCE_OPTS="{{ .Values.charging.query.jvmCoherenceOpts }}"

       if [ "${FEDERATION_ENABLED}" = "true" ]; then
          if [ "${ECE_PERSISTENCE_ENABLED}" = "true" ]; then
             COHERENCE_OPTS="${COHERENCE_OPTS} -Dcoherence.cacheconfig=charging-cache-config-persistence.xml"
          else
             COHERENCE_OPTS="${COHERENCE_OPTS} -Dcoherence.cacheconfig=charging-cache-config.xml"
          fi
       fi

       if [ "${COH_WKA_PORT}" != "" ]; then
          COHERENCE_OPTS="${COHERENCE_OPTS} -Dcoherence.clusterport=${COH_WKA_PORT}"
       fi

       {{- if eq .Values.charging.secondaryCluster "true" }}
       {{ range $key, $value := .Values.charging.cluster.secondary }}
       {{- if eq $value.clusterName $.Values.charging.clusterName }}
       COH_WKA={{ $value.eceServiceName | quote }}
       {{- end }}
       {{ end }}
       {{- else }}
       COH_WKA={{ .Values.charging.cluster.primary.eceServiceName | quote }}
       {{- end }}

       COH_CLUSTER={{ .Values.charging.clusterName | quote }}

       JVM_OPTS="{{ .Values.charging.query.jvmOpts }}"

       export DBQ
       $JAVA_HOME/bin/java -Dtangosol.coherence.member=query -Dtangosol.coherence.distributed.localstorage=false -Dlog4j.configurationFile=file:${ECE_HOME}/config/query_log4j2.yaml -DECE_LOG_FILE_PATH=/home/charging/opt/ECE/oceceserver/logs/query.out ${JMX_OPTS} ${COHERENCE_OPTS} ${JVM_OPTS} -Dtangosol.coherence.wka=${COH_WKA} -Dcoherence.cluster=${COH_CLUSTER} -cp $CLASSPATH -server oracle.communication.brm.charging.server.QueryLauncher "$@"

  REM.properties: |
         #------------------------------------------------------------------------------#
         # FILE: REM.properties
         #
         # DESCRIPTION:
         #
         # Contains configuration parameters for the Rated Event Manager ...
         #
         # INFORMATION:
         #
         # Rated Event Manager ...
         #
         # REVISION:
         #
         # $Revision: 1.31 $
         # $Author: ri-user-1 $
         # $Date: 2021/09/18 14:10:31 $
         #------------------------------------------------------------------------------#

         #------------------------------------------------------------------------------#
         # REF Plugin Configuration
         #------------------------------------------------------------------------------#
         #
         # JDBC Connection Pool ...
         #
         # If using multi-schema BRM, a connection should be provided for each schema, and referring to the
         # appropriate DB service. REF will indicate which schema to use.
         ref.jdbc_pool.connectionURL.1 = {{ .Values.REFPluginConfiguration.connectionURL1 }}
         ref.jdbc_pool.connectionURL.2 = {{ .Values.REFPluginConfiguration.connectionURL2 }}
         #ref.jdbc_pool.connectionURL.3 = {{ .Values.REFPluginConfiguration.connectionURL3 }}
         ref.jdbc_pool.user.1 = {{ .Values.REFPluginConfiguration.user1 }}
         ref.jdbc_pool.user.2 = {{ .Values.REFPluginConfiguration.user2 }}
         #ref.jdbc_pool.user.3 = {{ .Values.REFPluginConfiguration.user3 }}
         ref.jdbc_pool.wallet_location = {{ .Values.REFPluginConfiguration.wallet_location }}
         ref.jdbc_pool.wallet_entry_name.1 = {{ .Values.REFPluginConfiguration.wallet_entry_name1 }}
         ref.jdbc_pool.wallet_entry_name.2 = {{ .Values.REFPluginConfiguration.wallet_entry_name2 }}
         #ref.jdbc_pool.wallet_entry_name.3 = {{ .Values.REFPluginConfiguration.wallet_entry_name3 }}
         ref.jdbc_pool.validateSchema = {{ .Values.REFPluginConfiguration.validateSchema }}
         ref.jdbc_pool.initialPoolSize = {{ .Values.REFPluginConfiguration.initialPoolSize }}
         ref.jdbc_pool.minPoolSize = {{ .Values.REFPluginConfiguration.minPoolSize }}
         ref.jdbc_pool.maxPoolSize = {{ .Values.REFPluginConfiguration.maxPoolSize }}
         ref.jdbc_pool.connectionWaitTimeout = {{ .Values.REFPluginConfiguration.connectionWaitTimeout }}
         ref.jdbc_pool.validateConnectionOnBorrow = {{ .Values.REFPluginConfiguration.validateConnectionOnBorrow }}
         ref.jdbc_pool.sqlForValidateConnection = {{ .Values.REFPluginConfiguration.sqlForValidateConnection }}
         ref.jdbc_pool.fastConnectionFailoverEnabled = {{ .Values.REFPluginConfiguration.fastConnectionFailoverEnabled }}
         ref.jdbc_pool.onsConfiguration =
         ref.jdbc_pool.maxStatements = {{ .Values.REFPluginConfiguration.maxStatements }}
         ref.jdbc_pool.jmxEnabled = {{ .Values.REFPluginConfiguration.jmxEnabled }}
         ref.jdbc_pool.metricUpdateInterval = {{ .Values.REFPluginConfiguration.metricUpdateInterval }}
         ref.jdbc_pool.poolLogLevel = {{ .Values.REFPluginConfiguration.poolLogLevel }}
         ref.jdbc_pool.nonTransientErrorCodes = 1,1450,12899,1722,20010,1489
         ref.jdbc_pool.dbSSLEnabled = {{ .Values.REFPluginConfiguration.dbSSLEnabled }}
         ref.jdbc_pool.dbSSLClientAuth = {{ .Values.REFPluginConfiguration.dbSSLClientAuth }}
         #ref.jdbc_pool.sslTrustStoreLocation = {{ .Values.REFPluginConfiguration.sslTrustStoreLocation }}
         #ref.jdbc_pool.sslKeyStoreLocation = {{ .Values.REFPluginConfiguration.sslKeyStoreLocation }}
         #ref.jdbc_pool.wallet_entry_name.sslTrustStorePwd = {{ .Values.REFPluginConfiguration.sslTrustStorePwd }}
         #ref.jdbc_pool.wallet_entry_name.sslKeyStorePwd = {{ .Values.REFPluginConfiguration.sslKeyStorePwd }}
         #
         # Global application settings ...
         #
         ref.control_file_dir = {{ .Values.REFPluginConfiguration.control_file_dir }}
         ref.load_thread_capacity = {{ .Values.REFPluginConfiguration.load_thread_capacity }}
         ref.update_thread_capacity = {{ .Values.REFPluginConfiguration.update_thread_capacity }}
         # Whether to use direct-path loading or not
         ref.direct_path_loading = false

         # Timeout (in seconds) for inserting zipped BLOB data for ZIP_DB mode
         ref.blob_timeout_seconds = 30
         ref.concurrent_updaters = {{ .Values.REFPluginConfiguration.concurrent_updaters }}
         ref.updater_backlog_limit = {{ .Values.REFPluginConfiguration.updater_backlog_limit }}

         # The default mode of operation of the plugin at startup (this value can be changed at runtime via JMX, if desired
         # to facilitate operational maintenenace - e.g. a planned BRM DB downtime can be handled by generating CDR files).
         # The available operational modes are:
         #
         #  o CDR      - CDRs will be generated only (standard ECE BrmCdrPluginDirect behaviour)
         #  o DIRECT   - Data will be loaded directly into BRM in the form of /event records
         #  o ZIP_DB   - Data will be zipped and stored in BRM database as a BLOB containing the CDR file data
         #  o ZIP_FILE - Data will be zipped and stored in the ECE file system
         #
         ref.mode = {{ .Values.REFPluginConfiguration.refmode }}

         #
         # REF Parameters
         # --------------
         #
         # The REF parameters that control loading of data into the BRM database are largely the same as those used by
         # the REM process (see 'directory_processor' configuration for more details concerning specific parameters).
         #
         # NOTE: Some REM parameters are not required for the REF plugin (e.g. the directory configuration for ZIP files,
         #       and the number of concurrent loaders is governed by the core REF configuration - e.g. data-file directory
         #       and threadPool sizes).
         #
         ref.default.creation_process = {{ .Values.REFPluginConfiguration.creation_process }}
         ref.default.object_cache_type = 2
         ref.default.updater_proc_name = pin_rel.pin_rel_updater_sp
         ref.default.updater_threads = 0 : 1, 10000 : 2, 50000 : 3, 100000 : 4
         ref.default.updater_flags = 1
         ref.default.updater_batch_size = 25
         ref.default.updater_timeout_seconds = 60
         ref.default.pre_updater_proc_name = pin_rel.pin_rel_pre_updater_sp
         ref.default.pre_updater_threads = 0 : 1, 10000 : 2, 50000 : 3, 100000 : 4
         ref.default.updater_flags = 1
         ref.default.pre_updater_flags = 1
         ref.default.pre_updater_batch_size = 25
         ref.default.pre_updater_timeout_seconds = 60
         ref.default.insert_batch_size = 250
         ref.default.insert_timeout_seconds = 30
         ref.default.commit_batch_size = 250
         ref.default.max_rows_per_load_thread = 50000
         ref.default.use_end_time = true
         ref.default.enable_serveroutput = 0
         #
         # NOTE: The post-processor logic is only used for DIRECT mode loading to permit the raw files to
         #       be preserved, if required. ZIP_FILE and ZIP_DB mode will delete the files (as they are available
         #       in the ZIP file itself). CDR mode will just retain the CDR files. Only success mode applies as a
         #       failure will not have produced CDR files (they will remain in ECE's RatedEvent Persistence store - either
         #       NoSQL or the Oracle RDBMS). See the 'directory_processor' configuration for REM for a description of the
         #       available post-processing modes.
         #
         ref.default.success.mode = {{ .Values.REFPluginConfiguration.successmode }}
         #ref.default.success.target_directory = ${HOME}/data/cdr_files_archive

         #
         # Retry logic for handling failures. All errors are classified into two categories:
         #
         # 1. Transient errors (those that could resolve themselves - temporary DB connectivity, for example, or a timeout
         #    of an operation.
         #
         # 2. Non-Transient errors (those that are data related (e.g. data to large for a field). However many times they are
         #    retried, they will not start working.
         #
         # NOTE: See the JDBC Pool 'nonTransientErrorCodes' configuration for errors which are considered non-transient
         #
         # The plugin permits a configurable number of retries for transient errors, and will mark all non-transient errors as
         # as failures. It is NOT possible to direct-load data with non-transient errors. Direct-load mode therefore MUST have
         # a fallback mode (next_mode in the configuration below) to indicate what alternative processing option should be used
         # in the event that direct loading fails.
         #
         # Multiple failure steps can be configured (e.g. direct-load => zip-to-db => zip-to-file) so that a complete DB failure
         # would still permit events to be off-loaded from ECE to the file-system in the event of a complete DB outage (or the
         # retry logic could retry for a considerable period during which time CDR data would be retained in the ECE persistence
         # store).
         #
         # The configuration below contains entries of the form 'ref.retry.<mode>.<parameter>' where the '<mode>' is one of the REF
         # plugin modes such as 'direct', 'zip_db', 'zip_file', 'cdr'. One section can be defined for each mode with the following
         # parameters:
         #
         #  num_retries    - The number of attempts to load that will be permitted (cleanup and retry is performed a maximum number
         #                   of times. So a num_retries=3 indicates 4 attempts in total. Note that a non-transient error, if detected
         #                   will not be retried and processing will immediately move to the next_mode (the data will be flagged as
         #                   being 'bad' for ZIP data). Currently CDR processing is left as it is. A future parameter may be added
         #                   to modifiy the .out files to be '.out.bad' to indicate invalid data.
         #
         # delay_millis    - The basic time to wait between retries. This is configured in milliseconds.
         #
         # delay_algorithm - The algorithm to use to determine the delay between subequent retries. It may be one of the following
         #                   values (the examples assume a 3 second delay_millis configuration). The default is 'simple'.
         #
         #                   simple - The delay for each retry is just the delay_millis value (e.g. 3, 3, 3, 3, ...)
         #                   linear - The delay adds delay_millis at each retry (e.g. 3, 6, 9, 12, 15, ...)
         #                   double - The delay always doubles at each retry (e.g. 6, 12, 24, 48, 96, ...)
         #                   exponential - The delay increases exponentially at each retry (e.g. 3, 9, 27, 81, 243, ...)
         #
         # next_mode       - This is the next processing mode to try in the event it was not possible to process the data using the
         #                   current mode. Typically retry would be done in the following order: direct => zip_db => zip_file => cdr.
         #                   However, any ordering can be configured. The starting mode is defined by the 'ref.mode' parameter (which
         #                   can be altered at run-time without restarting the ratedEventFormatter (so, if a known DB outage is expected
         #                   one could switch to ZIP_FILE mode to generate files of CDRs to load later after transfer to the BRM server).
         #
         # DIRECT mode falls back to ZIP_DB mode ...
         ref.retry.direct.num_retries = 3
         ref.retry.direct.delay_millis = 2000
         ref.retry.direct.delay_algorithm = exponential
         ref.retry.direct.next_mode = zip_db
         # ZIP_DB mode falls back to ZIP_FILE mode ...
         ref.retry.zip_db.num_retries = 3
         ref.retry.zip_db.delay_millis = 2000
         ref.retry.zip_db.delay_algorithm = linear
         ref.retry.zip_db.next_mode = zip_file
         # ZIP_FILE mode falls back to CDR mode ...
         ref.retry.zip_file.num_retries = 3
         ref.retry.zip_file.delay_millis = 1000
         ref.retry.zip_file.delay_algorithm = exponential
         ref.retry.zip_file.next_mode = cdr

  query_log4j2.yaml: |-
    Configuration:
      Properties:
        Property:
          name: LOG_DIR
          value: "${env:ECE_LOG_FILE_PATH:-${sys:ECE_LOG_FILE_PATH:-./logs/ece}}"

      Appenders:
        RollingFile:
          - name: ECE_LOG
            fileName: "${LOG_DIR}.log"
            filePattern: "${LOG_DIR}.log.%i"
            immediateFlush: false
            PatternLayout:
              pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS zzz} %5p - %X{correlationId} - %X{requestId} - %X{customerId} - %m%n"
            Policies:
              SizeBasedTriggeringPolicy:
                size: "20MB"
            DefaultRolloverStrategy:
              max: "99"
          - name: ECE_SUMMARY_REPORT
            createOnDemand: true
            fileName: "${LOG_DIR}_ECE_SUMMARY_REPORT.log"
            filePattern: "${LOG_DIR}_ECE_SUMMARY_REPORT_%d{yyyy-MM-dd-HH}.log"
            immediateFlush: false
            PatternLayout:
              pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS zzz} %5p - %X{correlationId} - %X{requestId} - %X{customerId} - %m%n"
            Policies:
              TimeBasedTriggeringPolicy:
                interval: 1
                modulate: true
            DefaultRolloverStrategy:
              Delete:
                basePath: "${LOG_DIR}"
                maxDepth: 1
                IfFileName:
                  glob: "${sys:tangosol.coherence.member}_ECE_SUMMARY_REPORT_*.log"
                IfAccumulatedFileCount:
                  exceeds: 24
          - name: ECE_ALERT_REPORT
            createOnDemand: true
            fileName: "${LOG_DIR}_ECE_ALERT_REPORT.log"
            filePattern: "${LOG_DIR}_ECE_ALERT_REPORT_%d{yyyy-MM-dd-HH}.log"
            immediateFlush: false
            PatternLayout:
              pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS zzz} %5p - %X{correlationId} - %X{requestId} - %X{customerId} - %m%n"
            Policies:
              TimeBasedTriggeringPolicy:
                interval: 1
                modulate: true
            DefaultRolloverStrategy:
              Delete:
                basePath: "${LOG_DIR}"
                maxDepth: 1
                IfFileName:
                  glob: "${sys:tangosol.coherence.member}_ECE_ALERT_REPORT_*.log"
                IfAccumulatedFileCount:
                  exceeds: 24
          - name: REM
            fileName: "${sys:REM_LOG_BASE}.log"
            filePattern: "${sys:REM_LOG_BASE}.log.%i"
            immediateFlush: false
            PatternLayout:
              pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5p] [%t] %m%n"
            Policies:
              SizeBasedTriggeringPolicy:
                size: "100MB"
            DefaultRolloverStrategy:
              max: "99"
          - name: REM_DIAG
            fileName: "${sys:REM_LOG_BASE}_DIAG.log"
            filePattern: "${sys:REM_LOG_BASE}_DIAG.log.%i"
            immediateFlush: false
            PatternLayout:
              pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5p] [%t] %m%n"
            Policies:
              SizeBasedTriggeringPolicy:
                size: "100MB"
            DefaultRolloverStrategy:
              max: "99"


      Loggers:
        AsyncLogger:
          - name: "oracle.communication.brm.charging.appconfiguration"
            level: {{ .Values.log4j2.logger.appconfiguration | quote}}
          - name: "oracle.communication.brm.charging.balance"
            level: {{ .Values.log4j2.logger.balance | quote}}
          - name: "oracle.communication.brm.charging.brs"
            level: {{ .Values.log4j2.logger.brs | quote}}
          - name: "oracle.communication.brm.charging.brs.diagnostics"
            level: {{ .Values.log4j2.logger.brsDiagnostics | quote}}
          - name: "oracle.communication.brm.charging.diametergateway.cdrtrace"
            level: {{ .Values.log4j2.logger.diametergatewayCdrtrace | quote}}
          - name: "oracle.communication.brm.charging.ecs.cdrtrace"
            level: {{ .Values.log4j2.logger.ecsCdrtrace | quote}}
          - name: "oracle.communication.brm.charging.config"
            level: {{ .Values.log4j2.logger.config | quote}}
          - name: "oracle.communication.brm.charging.customer"
            level: {{ .Values.log4j2.logger.customer | quote}}
          - name: "oracle.communication.brm.charging.dsl"
            level: {{ .Values.log4j2.logger.dsl | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.diameter.framework"
            level: {{ .Values.log4j2.logger.ecegatewayDiameterFramework | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.diameter.gy"
            level: {{ .Values.log4j2.logger.ecegatewayDiameterGy | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.diameter.launcher"
            level: {{ .Values.log4j2.logger.ecegatewayDiameterLauncher | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.diameter.sh"
            level: {{ .Values.log4j2.logger.ecegatewayDiameterSh | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.diameter.sy"
            level: {{ .Values.log4j2.logger.ecegatewayDiameterSy | quote}}
          - name: "oracle.communication.brm.charging.diameter.tekelec"
            level: {{ .Values.log4j2.logger.diameterTekelec | quote}}
          - name: camiant
            level: {{ .Values.log4j2.logger.camiant | quote}}
          - name: "camiant.diameter.apps"
            level: {{ .Values.log4j2.logger.camiantDiameterApps | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.radius"
            level: {{ .Values.log4j2.logger.ecegatewayRadius | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.http.server"
            level: {{ .Values.log4j2.logger.ecegatewayHttpServer | quote}}
          - name: "oracle.communication.brm.charging.ecegateway.cdr"
            level: {{ .Values.log4j2.logger.ecegatewayCdr | quote}}
          - name: "oracle.communication.brm.charging.cdr.formatter"
            level: {{ .Values.log4j2.logger.cdrFormatter | quote}}
          - name: "oracle.communication.brm.charging.cdr.formatterplugin"
            level: {{ .Values.log4j2.logger.cdrFormatterPlugin | quote}}
          - name: "oracle.communication.brm.charging.extensions"
            level: {{ .Values.log4j2.logger.extensions | quote}}
          - name: "oracle.communication.brm.charging.federation.client"
            level: {{ .Values.log4j2.logger.federationClient | quote}}
          - name: "oracle.communication.brm.charging.federation.interceptor"
            level: {{ .Values.log4j2.logger.federationInterceptor | quote}}
          - name: "oracle.communication.brm.charging.identity"
            level: {{ .Values.log4j2.logger.identity | quote}}
          - name: "oracle.communication.brm.charging.integrations.brmgateway"
            level: {{ .Values.log4j2.logger.brmgateway | quote}}
          - name: "oracle.communication.brm.charging.integrations.brmpoid"
            level: DEBUG
          - name: "oracle.communication.brm.charging.integrations.emgateway"
            level: {{ .Values.log4j2.logger.emgateway | quote}}
          - name: "org.apache.kafka"
            level: {{ .Values.log4j2.logger.kafka | quote}}
          - name: "oracle.communication.brm.charging.messages.framework"
            level: {{ .Values.log4j2.logger.messagesFramework | quote}}
          - name: "oracle.communication.brm.charging.messages.management"
            level: {{ .Values.log4j2.logger.messagesManagement | quote}}
          - name: "oracle.communication.brm.charging.messages.query"
            level: {{ .Values.log4j2.logger.messagesQuery | quote}}
          - name: "oracle.communication.brm.charging.messages.update"
            level: {{ .Values.log4j2.logger.messagesUpdate | quote}}
          - name: "oracle.communication.brm.charging.messages.usage"
            level: {{ .Values.log4j2.logger.messagesUsage | quote}}
          - name: "oracle.communication.brm.charging.migration.config"
            level: {{ .Values.log4j2.logger.migrationConfig | quote}}
          - name: "oracle.communication.brm.charging.migration.crossref"
            level: {{ .Values.log4j2.logger.migrationCrossref | quote}}
          - name: "oracle.communication.brm.charging.migration.customer.loader"
            level: {{ .Values.log4j2.logger.customerLoader | quote}}
          - name: "oracle.communication.brm.charging.migration.customer.updater"
            level: {{ .Values.log4j2.logger.customerUpdater | quote}}
          - name: "oracle.communication.brm.charging.migration.pricing.loader"
            level: {{ .Values.log4j2.logger.pricingLoader | quote}}
          - name: "oracle.communication.brm.charging.migration.pricing.updater"
            level: {{ .Values.log4j2.logger.pricingUpdater | quote}}
          - name: "oracle.communication.brm.charging.notification"
            level: {{ .Values.log4j2.logger.notification | quote}}
          - name: "oracle.communication.brm.charging.orchestration.charging.requestenrichment"
            level: {{ .Values.log4j2.logger.requestenrichment | quote}}
          - name: "oracle.communication.brm.charging.orchestration.common"
            level: {{ .Values.log4j2.logger.orchestrationCommon | quote}}
          - name: "oracle.communication.brm.charging.orchestration.framework"
            level: {{ .Values.log4j2.logger.orchestrationFramework | quote}}
          - name: "oracle.communication.brm.charging.orchestration.management"
            level: {{ .Values.log4j2.logger.orchestrationManagement | quote}}
          - name: "oracle.communication.brm.charging.orchestration.query"
            level: {{ .Values.log4j2.logger.orchestrationQuery | quote}}
          - name: "oracle.communication.brm.charging.orchestration.subscription"
            level: {{ .Values.log4j2.logger.orchestrationSubscription | quote}}
          - name: "oracle.communication.brm.charging.orchestration.update"
            level: {{ .Values.log4j2.logger.orchestrationUpdate | quote}}
          - name: "oracle.communication.brm.charging.orchestration.usage"
            level: {{ .Values.log4j2.logger.orchestrationUsage | quote}}
          - name: "oracle.communication.brm.charging.pdcspecgen"
            level: {{ .Values.log4j2.logger.pdcspecgen | quote}}
          - name: "oracle.communication.brm.charging.pricing"
            level: {{ .Values.log4j2.logger.pricing | quote}}
          - name: "oracle.communication.brm.charging.processor.framework"
            level: {{ .Values.log4j2.logger.processorFramework | quote}}
          - name: "oracle.communication.brm.charging.processor.management"
            level: {{ .Values.log4j2.logger.processorManagement | quote}}
          - name: "oracle.communication.brm.charging.processor.update"
            level: {{ .Values.log4j2.logger.processorUpdate | quote}}
          - name: "oracle.communication.brm.charging.processor.usage"
            level: {{ .Values.log4j2.logger.processorUsage | quote}}
          - name: "oracle.communication.brm.charging.product"
            level: {{ .Values.log4j2.logger.product | quote}}
          - name: "oracle.communication.brm.charging.ratedevent.dao"
            level: {{ .Values.log4j2.logger.ratedeventDao | quote}}
          - name: "oracle.communication.brm.charging.ratedevent.formatter"
            level: {{ .Values.log4j2.logger.ratedeventFormatter | quote}}
          - name: "oracle.communication.brm.charging.ratedevent.formatterplugin"
            level: {{ .Values.log4j2.logger.ratedeventFormatterPlugin | quote}}
          - name: "oracle.communication.brm.charging.ratedevent.purgeratedevent"
            level: {{ .Values.log4j2.logger.ratedeventPurgeratedevent | quote}}
          - name: "oracle.communication.brm.charging.ratedevent.service"
            level: {{ .Values.log4j2.logger.ratedeventService | quote}}
          - name: "oracle.communication.brm.charging.processor.ratedeventtrace"
            level: {{ .Values.log4j2.logger.ratedeventtrace | quote}}
          - name: "oracle.communication.brm.charging.rating"
            level: {{ .Values.log4j2.logger.rating | quote}}
          - name: "oracle.communication.brm.charging.rating.charge"
            level: {{ .Values.log4j2.logger.ratingCharge | quote}}
          - name: "oracle.communication.brm.charging.rating.alteration"
            level: {{ .Values.log4j2.logger.ratingAlteration | quote}}
          - name: "oracle.communication.brm.charging.rating.distribution"
            level: {{ .Values.log4j2.logger.ratingDistribution | quote}}
          - name: "oracle.communication.brm.charging.server"
            level: {{ .Values.log4j2.logger.server | quote}}
          - name: "oracle.communication.brm.charging.session"
            level: {{ .Values.log4j2.logger.session | quote}}
          - name: "oracle.communication.brm.charging.sharingagreement"
            level: {{ .Values.log4j2.logger.sharingagreement | quote}}
          - name: "oracle.communication.brm.charging.statemanager"
            level: {{ .Values.log4j2.logger.statemanager | quote}}
          - name: "oracle.communication.brm.charging.subscribertrace.configuration"
            level: {{ .Values.log4j2.logger.subscribertraceConfiguration | quote}}
          - name: "oracle.communication.brm.charging.subscribertrace.log"
            level: {{ .Values.log4j2.logger.subscribertraceLog | quote}}
          - name: "oracle.communication.brm.charging.monitor.framework"
            level: {{ .Values.log4j2.logger.monitorFramework | quote}}
          - name: "oracle.communication.brm.charging.monitor.agent"
            level: {{ .Values.log4j2.logger.monitorAgent | quote}}
          - name: "oracle.communication.brm.charging.monitor.configuration"
            level: {{ .Values.log4j2.logger.monitorConfiguration | quote}}
          - name: "oracle.communication.brm.charging.monitor.utils"
            level: {{ .Values.log4j2.logger.monitorUtils | quote}}
          - name: "oracle.communication.brm.charging.cachepersistence.dao"
            level: {{ .Values.log4j2.logger.cachepersistenceDao | quote}}
          - name: "oracle.communication.brm.charging.cachepersistence.reload"
            level: {{ .Values.log4j2.logger.cachepersistenceReload | quote}}
          - name: "oracle.communication.brm.charging.cachepersistence.persist"
            level: {{ .Values.log4j2.logger.cachepersistencePersist | quote}}
          - name: "oracle.communication.brm.charging.cachepersistence.data"
            level: {{ .Values.log4j2.logger.cachepersistenceData | quote}}
          - name: "oracle.communication.brm.charging.cachepersistence.util"
            level: {{ .Values.log4j2.logger.cachepersistenceUtil | quote}}
          - name: "oracle.communication.brm.charging.tools.lpr"
            level: {{ .Values.log4j2.logger.toolsLpr | quote}}
          - name: "oracle.communication.brm.charging.tools"
            level: {{ .Values.log4j2.logger.tools | quote}}
          - name: "oracle.communication.brm.charging.util.highavailability2"
            level: {{ .Values.log4j2.logger.highavailability2 | quote}}
          - name: "oracle.communication.brm.charging.transports"
            level: {{ .Values.log4j2.logger.transports | quote}}
          - name: "oracle.communication.brm.charging.util"
            level: {{ .Values.log4j2.logger.util | quote}}
          - name: Coherence
            level: {{ .Values.log4j2.logger.Coherence | quote}}
          - name: "org.springframework"
            level: {{ .Values.log4j2.logger.springframework | quote}}

          - name: "oracle.communication.brm.charging.monitor.summary"
            level: {{ .Values.log4j2.logger.monitorSummary | quote}}
            additivity: false
            AppenderRef:
             - ref: ECE_SUMMARY_REPORT

          - name: "oracle.communication.brm.charging.monitor.alert"
            level: {{ .Values.log4j2.logger.monitorAlert | quote}}
            additivity: false
            AppenderRef:
              - ref: ECE_ALERT_REPORT

          - name: "com.oracle.brm.rated_event_manager"
            level: {{ .Values.log4j2.logger.brmRatedeventmanager | quote}}
          - name: "com.oracle.brm.rated_event_manager.diagnostic"
            level: {{ .Values.log4j2.logger.brmRatedeventmanagerDiagnostic | quote}}
            additivity: false
            AppenderRef:
              - ref: REM_DIAG

        AsyncRoot:
          level: {{ .Values.log4j2.logger.root | quote}}
          AppenderRef:
            - ref: ECE_LOG

  coherence-jaas.config: |
       Coherence {
         com.tangosol.security.KeystoreLogin required
         keyStorePath="/home/charging/opt/ECE/oceceserver/config/server.jks";
       };
  permissions.xml: |
       <?xml version='1.0'?>
       <permissions>
         <grant>
          <principal>
            <class>javax.security.auth.x500.X500Principal</class>
            <name>"CN=${HOSTNAME}, OU=Oracle Communication Application, O=Oracle Corporation, L=Redwood Shores, S=California, C=US"</name>
          </principal>

         <permission>
          <target>*</target>
          <action>all</action>
         </permission>
         </grant>
       </permissions>

  jmxremote.password: |
      monitorRole  QED
      controlRole   R&D
      admin=Cgbu1234
      boundarySystemAdmin=Cgbu1234

  {{ range $value := list "charging-cache-config-persistence.xml" "charging-cache-config-federation-persistence.xml" }}
  {{ print $value }}: |
    <?xml version="1.0"?>
    <cache-config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xmlns="http://xmlns.oracle.com/coherence/coherence-cache-config"
              xmlns:c="class://oracle.communication.brm.charging.util.coherence.CqcNamespaceHandler"
              xsi:schemaLocation="http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd">
    <defaults>
        <serializer>pof</serializer>
    </defaults>
    <caching-scheme-mapping>
        <cache-mapping>
            <cache-name>HighAvailability</cache-name>
            <scheme-name>system-distributed</scheme-name>
        </cache-mapping>

        <!--
        Caches with any name will be created as on heap partitioned with
        cachestore.
        -->
        <cache-mapping>
            <cache-name>PublicUserIdentity</cache-name>
            <scheme-name>near-federated</scheme-name>
            <init-params>
                <init-param>
                    <param-name>transient</param-name>
                    <param-value>true</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>PublicUserIdentityKey</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>PublicUserIdentity</param-value>
                </init-param>
                <init-param>
                    <param-name>key-only</param-name>
                    <param-value>true</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>RatedEventFormatterObject</cache-name>
            <scheme-name>default-federated-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>write-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
                <init-param>
                    <param-name>cache-store</param-name>
                    <param-value>oracle.communication.brm.charging.cachepersistence.persist.internal.coherence.RatedEventFormatterObjectCacheStore</param-value>
                </init-param>
            </init-params>
            <federated>true</federated>
        </cache-mapping>


        <cache-mapping>
            <!--
            - Aggregate Object for Usage Flow.
            -
            - This cache would be used for persisting objects like
            - Customer, Balance, RatedEvent, RecurringBundleIdHistory
            - in the same transaction. This would be used for persisting data
            - during the usage flow.
            - For Realtime/Convergent deployment this cache should be configured as write-through
            - For Batch deployment this cache should be configured as write behind.
            -->
            <cache-name>AggregateObjectUsage</cache-name>
            <scheme-name>default-federated-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
                <!--
                - The parameter below decides if this cache is to operate as
                - write-through (Synchronous) or write-behind(Asynchronous with a write behind queue).
                -
                - For Realtime/Convergent deployment - The parameter "write-delay" should have a value that is non-zero, making it a write-behind cache.
                - For Batch deployment - The parameter "write-delay" should be set as '0', making it a write-through cache.
                -->
                <init-param>
                    <param-name>write-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
                <init-param>
                    <param-name>cache-store</param-name>
                    <param-value>oracle.communication.brm.charging.cachepersistence.persist.internal.coherence.CoherenceAggregateUsageObjectCacheStore</param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value>500MB</param-value>
                </init-param>
            </init-params>
            <federated>true</federated>
        </cache-mapping>

        <cache-mapping>
            <!--
            - Aggregate Object for Update Flow.
            -
            - This cache would be used during the Customer creation/modification flow.
            - This cache is configured as write-through (Synchronous).
            -->
            <cache-name>AggregateObjectUpdate</cache-name>
            <scheme-name>default-federated-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>cache-store</param-name>
                    <param-value>oracle.communication.brm.charging.cachepersistence.persist.internal.coherence.CoherenceAggregateUpdateObjectCacheStore</param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value>500MB</param-value>
                </init-param>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
            </init-params>
            <federated>true</federated>
        </cache-mapping>

        <cache-mapping>
            <!-- The scheme-name of the RatedEvent must be the same as for the distributed Customer
              - - The RatedEvent and dist-Customer uses KeyAssociation and they must use the same service
              - - for KeyAssociation to work.
              - - The size of RatedEvent cache store is determined by the expire-delay and back-size-limit.
              - - For a throughput of 1000 rated events per second for 5 minutes, roughly 600MB is required for
              - - the RatedEvent cache store.
              - - The cache-store configuration entry setting oracle.communication.brm.charging.util.coherence.internal.NoPersistenceCacheStore
              - - does not persist the rated events.
              - - To enable persisting rated events, cache-store configuration entry must be changed to
              - - oracle.communication.brm.charging.ratedevent.publisher.internal.coherence.RatedEventPublisher
              - -
              - -
              - - NOTE : The expiry delay value in the RatedEvent cache should match the corresponding value in the ServiceContext cache
              - -
              - -
            -->
            <cache-name>RatedEvent</cache-name>
            <scheme-name>default-federated-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value>5m</param-value>
                </init-param>
                <init-param>
                    <param-name>write-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
                <init-param>
                    <param-name>cache-store</param-name>
                    <!--<param-value>oracle.communication.brm.charging.ratedevent.publisher.internal.coherence.RatedEventPublisher</param-value>-->
                    <!--<param-value>oracle.communication.brm.charging.ratedevent.publisher.internal.coherence.SimpleFileBasedRatedEventPublisher</param-value>-->
                    <param-value>oracle.communication.brm.charging.util.coherence.internal.NoPersistenceCacheStore</param-value>
                    <!--persistenceEnabled<param-value>oracle.communication.brm.charging.util.coherence.internal.NoPersistenceCacheStore</param-value>-->
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value>600MB</param-value>
                </init-param>
            </init-params>
            <federated>false</federated>
        </cache-mapping>
        <cache-mapping>
            <!-- The scheme-name of the ServiceContext must be the same as for the distributed Customer
              - - The ServiceContext and dist-Customer uses KeyAssociation and they must use the same service
              - - for KeyAssociation to work.
              - - For a throughput of 1000 rated events per second for 5 minutes, roughly 600MB is required for
              - - the ServiceContext cache store.
              - - The cache-store configuration entry setting oracle.communication.brm.charging.util.coherence.internal.NoPersistenceCacheStore
              - - does not publish service events.
              - - To enable publishing, cache-store configuration entry must be changed to
              - - oracle.communication.brm.charging.notification.internal.coherence.AsynchronousNotificationPublisher
              - -
              - -
              - - NOTE : The expiry delay value in the RatedEvent cache should match the corresponding value in the ServiceContext cache
              - -
              - -
            -->
            <cache-name>ServiceContext</cache-name>
            <scheme-name>default-federated-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value>30m</param-value>
                </init-param>
                <init-param>
                    <param-name>write-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
                <init-param>
                    <param-name>cache-store</param-name>
                    <param-value>oracle.communication.brm.charging.notification.internal.coherence.AsynchronousNotificationPublisher</param-value>
                    <!--<param-value>oracle.communication.brm.charging.util.coherence.internal.NoPersistenceCacheStore</param-value>-->
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value>600MB</param-value>
                </init-param>
            </init-params>
            <federated>true</federated>
        </cache-mapping>
        <cache-mapping>
            <cache-name>RumDefinition</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedRumDefinition</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>CryptKeys</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedCryptKeys</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>EvolvableCommandChain</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedEvolvableCommandChain</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DslExpression</cache-name>
            <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>front-size-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>PriceModelSelectorResult</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedPriceModelSelectorResult</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ChargeOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedChargeOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>PriceModel</cache-name>
            <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>front-size-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AlterationOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedAlterationOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AlterationRatePlan</cache-name>
            <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>front-size-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>RatePlanSelector</cache-name>
            <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>front-size-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DistributionOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedDistributionOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DistributionRatePlan</cache-name>
            <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>front-size-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ChargeRatePlan</cache-name>
            <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>front-size-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>CreditProfile</cache-name>
            <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>front-size-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
          <cache-name>NotificationDeliveryMethod</cache-name>
          <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>front-size-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>BusinessProfile</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedBusinessProfile</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ItemAnalyzer</cache-name>
            <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>front-size-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DynamicQuotaConfiguration</cache-name>
            <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>front-size-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>BalanceElement</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedBalanceElement</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>BalanceElementIndex</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedBalanceElementIndex</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>RequestSpecification</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedRequestSpecification</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>NetworkMappingSpecification</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedNetworkMappingSpecification</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ResponseSpecification</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedResponseSpecification</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DiameterMediationTable</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedDiameterMediationTable</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AppConfiguration</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedAppConfiguration</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ZoneModel</cache-name>
            <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>front-size-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ProfileAttributeSpec</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedProfileAttributeSpec</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>GlobalCacheVersion</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedGlobalCacheVersion</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>OfferProfile</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>FederatedOfferProfile</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>TaxConfig</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedTaxConfig</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>TaxExemptionConfig</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedTaxExemptionConfig</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>Extensions</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedExtensions</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>State</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedState</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>Customer</cache-name>
            <scheme-name>default-federated-persisted-wb</scheme-name>
            <init-params>
                <!--
                - Disabling eviction : The parameter "back-high-limit" should be set to 0.
                                       This would make sure that all the Customer data is in ECE memory.
                - Enabling eviction : The parameter "back-high-limit" should be set to
                                       non-zero (value indicating max number of Customers in memory).
                -->
                <init-param>
                    <param-name>write-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>

                <init-param>
                    <param-name>back-high-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
                <!--
                - This value if non-zero would be the amount of records reloaded
                - on restart from persistence.
                - This value needs to be less than the value configured for back-high-limit.
                - If the back-low-limit is set to zero, this takes 80% of the configured back-high-value(if non-zero).
                -->
                <init-param>
                    <param-name>back-low-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>Balance</cache-name>
            <scheme-name>default-federated-persisted-wb</scheme-name>
            <init-params>
                <!--
                - Disabling eviction : The parameter "back-high-limit" should be set to 0.
                                       This would make sure that all the Customer data is in ECE memory.
                - Enabling eviction : The parameter "back-high-limit" should be set to
                                       non-zero (value indicating max number of Customers in memory).
                -->
                <init-param>
                    <param-name>write-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>

                <init-param>
                    <param-name>back-high-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
                <!--
                - This value if non-zero would be the amount of records reloaded
                - on restart from persistence.
                - This value needs to be less than the value configured for back-high-limit.
                - If the back-low-limit is set to zero, this takes 80% of the configured back-high-value(if non-zero).
                -->
                <init-param>
                    <param-name>back-low-limit</param-name>
                    <param-value>0</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>NotificationMetaData</cache-name>
            <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ActiveSession</cache-name>
            <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>RecurringBundleIdHistory</cache-name>
            <scheme-name>default-federated-persisted</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>BillingTriggerCycleInfo</cache-name>
            <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>SharingCustomerLock</cache-name>
            <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>CustomerInBrmTransactionLock</cache-name>
            <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>CustomerGroup</cache-name>
            <scheme-name>default-federated-persisted</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>SharingCustomerState</cache-name>
            <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>TopUpHistory</cache-name>
            <scheme-name>default-federated-persisted</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>SystemStore</cache-name>
            <scheme-name>xref-distributed</scheme-name>
        </cache-mapping>
        <!-- The scheme name for the poid id cache SHOULD NOT be the same as customer
        else it will lead to dead-lock
        -->
        <cache-mapping>
            <cache-name>PoidId</cache-name>
            <scheme-name>poidId-distributed</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>PDCXref</cache-name>
            <scheme-name>near-federated</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>PDCNameMapping</cache-name>
            <scheme-name>near-federated</scheme-name>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AttributeSpec</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedAttributeSpec</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AttributeSpecTableMetadata</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedAttributeSpecTableMetadata</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DomainObjectSpecification</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedDomainObjectSpecification</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>ChargeSystemOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedChargeSystemOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>AlterationSystemOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedAlterationSystemOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <cache-mapping>
            <cache-name>DistributionAggregationOffering</cache-name>
            <scheme-name>cqc-scheme</scheme-name>
            <init-params>
                <init-param>
                    <param-name>underlying-cache-name</param-name>
                    <param-value>ReplicatedFederatedDistributionAggregationOffering</param-value>
                </init-param>
            </init-params>
        </cache-mapping>
        <!-- Cache service to hold concurrent rated events; the entries are held with key association -->
        <cache-mapping>
            <cache-name>RatedEventInRerating</cache-name>
            <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>
        <!-- Cache service to hold concurrent service events; the entries are held with key association -->
        <cache-mapping>
            <cache-name>ServiceContextInRerating</cache-name>
            <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>
        <!-- Cache service to hold backout status of concurrent rated events; the entries are held with key association -->
        <cache-mapping>
            <cache-name>RerateBackoutStatus</cache-name>
            <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>
        <!--Cache service to hold parts of sy session which need to be persisted for diameter gateway -->
        <cache-mapping>
            <cache-name>DiameterPersistedSySessionStore</cache-name>
            <scheme-name>default-federated-persisted</scheme-name>
        </cache-mapping>

        <!-- Cache Service which holds the state for Recovery Process, when a Partition and Data Loss happens. -->
        <cache-mapping>
            <cache-name>RecoveryState</cache-name>
            <scheme-name>default-replicated</scheme-name>
        </cache-mapping>

        <!-- Cache Service which holds the status for Persistence, when a Partition and Data Loss happens. -->
        <cache-mapping>
            <cache-name>PersistenceState</cache-name>
            <scheme-name>replicated-federated-persisted</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>ReplicatedFederatedAppConfiguration</cache-name>
            <scheme-name>replicated-federated</scheme-name>
            <init-params>
                <init-param>
                    <param-name>transient</param-name>
                    <param-value>true</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>ReplicatedFederatedState</cache-name>
            <scheme-name>replicated-federated</scheme-name>
            <init-params>
                <init-param>
                    <param-name>transient</param-name>
                    <param-value>true</param-value>
                </init-param>
            </init-params>
        </cache-mapping>

        <cache-mapping>
            <cache-name>ReplicatedFederated*</cache-name>
            <scheme-name>replicated-federated-persisted</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>FederatedOffer*</cache-name>
            <scheme-name>offer-profile-federated-persisted</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>BrmCheckPoint</cache-name>
            <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>CacheSizingStatistics</cache-name>
            <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>TerminatedSessionHistory</cache-name>
            <scheme-name>default-federated-expiry</scheme-name>
            <init-params>
                <init-param>
                    <param-name>expiry-delay</param-name>
                    <param-value>5m</param-value>
                </init-param>
                <init-param>
                    <param-name>write-delay</param-name>
                    <param-value>1s</param-value>
                </init-param>
                <init-param>
                    <param-name>cache-store</param-name>
                    <param-value>oracle.communication.brm.charging.util.coherence.internal.NoPersistenceCacheStore</param-value>
                </init-param>
                <init-param>
                    <param-name>back-size-limit</param-name>
                    <param-value>500MB</param-value>
                </init-param>
            </init-params>
            <federated>false</federated>
        </cache-mapping>

        <cache-mapping>
           <cache-name>CustomerPartitionSchemaMapping</cache-name>
           <scheme-name>default-federated-not-persisted</scheme-name>
        </cache-mapping>

    </caching-scheme-mapping>
    <caching-schemes>
        <!--
        Invocation Service scheme.
        -->
        <invocation-scheme>
            <scheme-name>charging-invocation</scheme-name>
            <service-name>InvocationService</service-name>
            <thread-count>33</thread-count>
            <autostart system-property="tangosol.coherence.invocation.autostart">true</autostart>
        </invocation-scheme>

        <invocation-scheme>
            <scheme-name>system-invocation</scheme-name>
            <service-name>SystemInvocationService</service-name>
            <thread-count>10</thread-count>
            <autostart system-property="tangosol.coherence.invocation.autostart">true</autostart>
        </invocation-scheme>


        <local-scheme>
            <scheme-name>expiry-local-scheme</scheme-name>
            <high-units>{back-size-limit 0}</high-units>
            <unit-calculator>BINARY</unit-calculator>
            <expiry-delay>{expiry-delay 0}</expiry-delay>
        </local-scheme>

        <read-write-backing-map-scheme>
            <scheme-name>rw-bm</scheme-name>
            <internal-cache-scheme>
                <local-scheme>
                    <scheme-ref>expiry-local-scheme</scheme-ref>
                </local-scheme>
            </internal-cache-scheme>
            <cachestore-scheme>
                <class-scheme>
                    <class-name>{cache-store}</class-name>
                </class-scheme>
                <operation-bundling>
                    <bundle-config>
                        <operation-name>all</operation-name>
                        <preferred-size>1000</preferred-size>
                        <auto-adjust>true</auto-adjust>
                    </bundle-config>
                </operation-bundling>
            </cachestore-scheme>
            <write-delay>{write-delay 0}</write-delay>
            <write-batch-factor>0.75</write-batch-factor>
            <!-- Specifies the maximum size of the write-behind queue for which failed
                 cache store write operations are re-queued. If the current queue size < threshold then the
                 failed operations are requeued. Keeping it Integer.MAX_VALUE to make sure no updates are lost.
                 Though, a failure could cause OutOfMemoryException but with NoSQL clustered this is a risk
                 worth taking.
              -->
            <write-requeue-threshold>2147483647</write-requeue-threshold>
        </read-write-backing-map-scheme>

        <distributed-scheme>
            <scheme-name>system-distributed</scheme-name>
            <service-name>SystemDistributedCache</service-name>
            <lease-granularity>member</lease-granularity>
            <partition-listener>
                <class-name>oracle.communication.brm.charging.util.highavailability.internal.PartitionLossListener</class-name>
            </partition-listener>
            <backing-map-scheme>
                <local-scheme>
                    <unit-calculator>BINARY</unit-calculator>
                </local-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <!-- Backing Map And Eviction scheme for Persistence BinaryEntryStore based Caches.-->
        <!-- Eviction Scheme -->
        <local-scheme>
            <scheme-name>eviction-local-scheme</scheme-name>
            <eviction-policy>HYBRID</eviction-policy>
            <high-units>{back-high-limit 0}</high-units>
            <low-units>{back-low-limit 0}</low-units>
            <unit-calculator>FIXED</unit-calculator>
        </local-scheme>

        <!-- Backing Map -->
        <read-write-backing-map-scheme>
            <scheme-name>rw-persist-bm</scheme-name>
            <internal-cache-scheme>
                <local-scheme>
                    <!--<scheme-ref>eviction-local-scheme</scheme-ref>-->
                </local-scheme>
            </internal-cache-scheme>
            <cachestore-scheme>
                <class-scheme>
                    <class-name>oracle.communication.brm.charging.cachepersistence.persist.internal.coherence.CoherenceBinaryEntryStore</class-name>
                    <init-params>
                        <init-param>
                            <param-type>java.lang.String</param-type>
                            <param-value>{cache-name}</param-value>
                        </init-param>
                    </init-params>
                </class-scheme>
            </cachestore-scheme>
        </read-write-backing-map-scheme>

        <read-write-backing-map-scheme>
            <scheme-name>rw-persist-wb</scheme-name>
            <internal-cache-scheme>
                <local-scheme>
                    <!--<scheme-ref>eviction-local-scheme</scheme-ref>-->
                </local-scheme>
            </internal-cache-scheme>
            <cachestore-scheme>
                <class-scheme>
                    <class-name>oracle.communication.brm.charging.cachepersistence.persist.internal.coherence.CoherenceBinaryEntryStore</class-name>
                    <init-params>
                        <init-param>
                            <param-type>java.lang.String</param-type>
                            <param-value>{cache-name}</param-value>
                        </init-param>
                    </init-params>
                </class-scheme>
            </cachestore-scheme>
            <write-delay>{write-delay 0}</write-delay>
            <write-batch-factor>0.75</write-batch-factor>
            <write-requeue-threshold>2147483647</write-requeue-threshold>
        </read-write-backing-map-scheme>

        <!--
        Default common (parent) distributed distributed scheme.
        -->
        <distributed-scheme>
            <scheme-name>default-distributed</scheme-name>
            <service-name>BRMDistributedCache</service-name>
            <thread-count>4</thread-count>
            <!--compressor>standard</compressor-->
            <partition-count>4093</partition-count>
            <autostart>true</autostart>
        </distributed-scheme>

        <!--
        - To be used caches which are populated and the expired in a short period of time.
        -->
        <federated-scheme>
            <scheme-name>default-federated-expiry</scheme-name>
            <scheme-ref>default-federated</scheme-ref>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <scheme-ref>rw-bm</scheme-ref>
                    <internal-cache-scheme>
                        <local-scheme>
                            <scheme-ref>expiry-local-scheme</scheme-ref>
                        </local-scheme>
                    </internal-cache-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
        </federated-scheme>

        <!--
        - Default persisted eviction (child) federated cache scheme.
        - To be used for caches which are to be persisted and to be possibly evicted
        -->
        <federated-scheme>
            <scheme-name>default-federated-persisted</scheme-name>
            <scheme-ref>default-federated</scheme-ref>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <scheme-ref>rw-persist-bm</scheme-ref>
                    <internal-cache-scheme>
                        <local-scheme>
                            <scheme-ref>eviction-local-scheme</scheme-ref>
                        </local-scheme>
                    </internal-cache-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
        </federated-scheme>

        <federated-scheme>
            <scheme-name>default-federated-persisted-wb</scheme-name>
            <scheme-ref>default-federated</scheme-ref>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <scheme-ref>rw-persist-wb</scheme-ref>
                    <internal-cache-scheme>
                        <local-scheme>
                            <scheme-ref>eviction-local-scheme</scheme-ref>
                        </local-scheme>
                    </internal-cache-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
        </federated-scheme>

        <!--
        - Default non-expiry/non-eviction (child) federated cache scheme.
        - To be used for the caches which are completely in-memory.
        -->
        <federated-scheme>
            <scheme-name>default-federated-not-persisted</scheme-name>
            <scheme-ref>default-federated</scheme-ref>
            <backing-map-scheme>
                <local-scheme>
                    <unit-calculator>BINARY</unit-calculator>
                </local-scheme>
            </backing-map-scheme>
        </federated-scheme>

        <!-- used by State -->
        <near-scheme>
            <scheme-name>near-distributed</scheme-name>
            <front-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>20500000</high-units>
                </local-scheme>
            </front-scheme>
            <back-scheme>
                <distributed-scheme>
                    <scheme-ref>xref-distributed</scheme-ref>
                </distributed-scheme>
            </back-scheme>
            <invalidation-strategy>all</invalidation-strategy>
            <autostart>true</autostart>
        </near-scheme>

        <distributed-scheme>
            <scheme-name>xref-distributed</scheme-name>
            <service-name>XRefDistributedCache</service-name>
            <thread-count>1</thread-count>
            <partition-listener>
                <class-name>oracle.communication.brm.charging.cachepersistence.reload.internal.coherence.CoherencePartitionLossListener</class-name>
            </partition-listener>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <scheme-ref>rw-persist-bm</scheme-ref>
                    <internal-cache-scheme>
                        <local-scheme>
                            <unit-calculator>BINARY</unit-calculator>
                        </local-scheme>
                    </internal-cache-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <read-write-backing-map-scheme>
            <scheme-name>poid-rw-persist-bm</scheme-name>
            <internal-cache-scheme>
                <local-scheme>
                </local-scheme>
            </internal-cache-scheme>
            <cachestore-scheme>
                <class-scheme>
                    <class-name>oracle.communication.brm.charging.cachepersistence.persist.internal.coherence.CoherencePoidIdBinaryEntryStore</class-name>
                    <init-params>
                        <init-param>
                            <param-type>java.lang.String</param-type>
                            <param-value>{cache-name}</param-value>
                        </init-param>
                    </init-params>
                </class-scheme>
            </cachestore-scheme>
            <write-delay>0</write-delay>
        </read-write-backing-map-scheme>

        <distributed-scheme>
            <scheme-name>poidId-distributed</scheme-name>
            <service-name>PoidIdDistributedCache</service-name>
            <thread-count>1</thread-count>
            <partition-listener>
                <class-name>oracle.communication.brm.charging.cachepersistence.reload.internal.coherence.CoherencePartitionLossListener</class-name>
            </partition-listener>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <scheme-ref>poid-rw-persist-bm</scheme-ref>
                    <internal-cache-scheme>
                        <local-scheme>
                            <unit-calculator>BINARY</unit-calculator>
                        </local-scheme>
                    </internal-cache-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <!-- Default common (parent) federated scheme. -->
        <federated-scheme>
            <scheme-name>default-federated</scheme-name>
            <service-name>BRMFederatedCache</service-name>
            <thread-count>4</thread-count>
            <partition-count>4093</partition-count>
            <backup-count>1</backup-count>
            <partition-listener>
                <class-name>oracle.communication.brm.charging.cachepersistence.reload.internal.coherence.CoherencePartitionLossListener</class-name>
            </partition-listener>
            <autostart>true</autostart>
            <interceptors>
                <interceptor>
                    <name>FederatedInterceptor</name>
                    <instance>
                        <class-name>
                            oracle.communication.brm.charging.federation.interceptor.FederatedInterceptor
                        </class-name>
                    </instance>
                </interceptor>
                <interceptor>
                    <name>FederatedServiceContextInterceptor</name>
                    <instance>
                        <class-name>
                            oracle.communication.brm.charging.federation.interceptor.internal.coherence.FederatedServiceContextInterceptor
                        </class-name>
                    </instance>
                </interceptor>
            </interceptors>
            {{ if eq $value "charging-cache-config-federation-persistence.xml" }}
            <address-provider>
                <local-address>
                    <address system-property="coherence.extend.address"></address>
                    <port system-property="coherence.federation.port">{{ $.Values.charging.federatedCacheScheme.federationPort.brmfederated }}</port>
                </local-address>
            </address-provider>
            <topologies>
                <topology>
                    <name>Active</name>
                </topology>
            </topologies>
            {{ end }}
        </federated-scheme>

        <federated-scheme>
            <scheme-name>xref-federated</scheme-name>
            <service-name>XRefFederatedCache</service-name>
            <thread-count>1</thread-count>
            <partition-listener>
                <class-name>oracle.communication.brm.charging.cachepersistence.reload.internal.coherence.CoherencePartitionLossListener</class-name>
            </partition-listener>
            <backing-map-scheme>
                <transient>{transient false}</transient>
                <read-write-backing-map-scheme>
                    <scheme-ref>rw-persist-bm</scheme-ref>
                    <internal-cache-scheme>
                        <local-scheme>
                            <unit-calculator>BINARY</unit-calculator>
                        </local-scheme>
                    </internal-cache-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
            {{ if eq $value "charging-cache-config-federation-persistence.xml" }}
            <address-provider>
                <local-address>
                    <address system-property="coherence.extend.address"></address>
                    <port system-property="coherence.federation.port">{{ $.Values.charging.federatedCacheScheme.federationPort.xreffederated }}</port>
                </local-address>
            </address-provider>
            <topologies>
                <topology>
                    <name>Active</name>
                </topology>
            </topologies>
            {{ end }}
        </federated-scheme>

        <federated-scheme>
            <scheme-name>replicated-federated</scheme-name>
            <service-name>ReplicatedFederatedCache</service-name>
            <thread-count>1</thread-count>
            <partition-listener>
                <class-name>oracle.communication.brm.charging.cachepersistence.reload.internal.coherence.CoherencePartitionLossListener</class-name>
            </partition-listener>
            <autostart>true</autostart>
            {{ if eq $value "charging-cache-config-federation-persistence.xml" }}
            <address-provider>
                <local-address>
                    <address system-property="coherence.extend.address"></address>
                    <port system-property="coherence.federation.port">{{ $.Values.charging.federatedCacheScheme.federationPort.replicatedfederated }}</port>
                </local-address>
            </address-provider>
            <topologies>
                <topology>
                    <name>Active</name>
                </topology>
            </topologies>
            {{ end }}
            <!--<interceptors>-->
                <!--<interceptor>-->
                    <!--<name>AppConfigInterceptor</name>-->
                    <!--<instance>-->
                        <!--<class-name>-->
                            <!--oracle.communication.brm.charging.federation.interceptor.AppConfigInterceptor-->
                        <!--</class-name>-->
                    <!--</instance>-->
                <!--</interceptor>-->
            <!--</interceptors>-->

        </federated-scheme>

        <!--
        ~ Federated Scheme for Pricing/Config with Persistence
        -->
        <federated-scheme>
            <scheme-name>replicated-federated-persisted</scheme-name>
            <scheme-ref>replicated-federated</scheme-ref>
            <backing-map-scheme>
                <transient>{transient false}</transient>
                <read-write-backing-map-scheme>
                    <scheme-ref>rw-persist-bm</scheme-ref>
                    <internal-cache-scheme>
                        <local-scheme>
                            <unit-calculator>BINARY</unit-calculator>
                        </local-scheme>
                    </internal-cache-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
        </federated-scheme>

        <!--
        ~ Default Federated Scheme for OfferProfile
        -->
        <federated-scheme>
            <scheme-name>offer-profile-federated</scheme-name>
            <service-name>OfferProfileFederatedCache</service-name>
            <thread-count>1</thread-count>
            <partition-listener>
                <class-name>oracle.communication.brm.charging.cachepersistence.reload.internal.coherence.CoherencePartitionLossListener</class-name>
            </partition-listener>
            <autostart>true</autostart>
            {{ if eq $value "charging-cache-config-federation-persistence.xml" }}
            <address-provider>
                <local-address>
                    <address system-property="coherence.extend.address"></address>
                    <port system-property="coherence.federation.port">{{ $.Values.charging.federatedCacheScheme.federationPort.offerProfileFederated }}</port>
                </local-address>
            </address-provider>
            <topologies>
                <topology>
                    <name>Active</name>
                </topology>
            </topologies>
            {{ end }}
        </federated-scheme>

        <!--
        ~ Federated Scheme for OfferProfile with Persistence
        -->
        <federated-scheme>
            <scheme-name>offer-profile-federated-persisted</scheme-name>
            <scheme-ref>offer-profile-federated</scheme-ref>
            <backing-map-scheme>
                <transient>{transient false}</transient>
                <read-write-backing-map-scheme>
                    <scheme-ref>rw-persist-bm</scheme-ref>
                    <internal-cache-scheme>
                        <local-scheme>
                            <unit-calculator>BINARY</unit-calculator>
                        </local-scheme>
                    </internal-cache-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
        </federated-scheme>

        <!--near cache for PUI tuned to many entries -->
        <near-scheme>
            <scheme-name>near-federated</scheme-name>
            <front-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>20500000</high-units>
                </local-scheme>
            </front-scheme>
            <back-scheme>
                <federated-scheme>
                    <scheme-ref>xref-federated</scheme-ref>
                </federated-scheme>
            </back-scheme>
            <invalidation-strategy>all</invalidation-strategy>
            <autostart>true</autostart>
        </near-scheme>

        <!--near cache for replicated objects-->
        <near-scheme>
            <scheme-name>near-replicated-federated-persisted-expiry</scheme-name>
            <front-scheme>
                <local-scheme>
                    <eviction-policy>HYBRID</eviction-policy>
                    <high-units>{front-size-limit 0}</high-units>
                    <unit-calculator>FIXED</unit-calculator>
                    <expiry-delay>10d</expiry-delay>
                </local-scheme>
            </front-scheme>
            <back-scheme>
                <federated-scheme>
                    <scheme-ref>replicated-federated-persisted</scheme-ref>
                </federated-scheme>
            </back-scheme>
            <invalidation-strategy>all</invalidation-strategy>
            <autostart>true</autostart>
        </near-scheme>

        <!--
        ~ Replicated Scheme Service
        -->
        <replicated-scheme>
            <scheme-name>default-replicated</scheme-name>
            <service-name>BRMReplicatedCache</service-name>
            <backing-map-scheme>
                <local-scheme/>
            </backing-map-scheme>
            <autostart>true</autostart>
        </replicated-scheme>

        <distributed-scheme>
            <scheme-name>distributed-persisted</scheme-name>
            <scheme-ref>default-distributed</scheme-ref>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                    <scheme-ref>rw-persist-bm</scheme-ref>
                    <internal-cache-scheme>
                        <local-scheme>
                            <unit-calculator>BINARY</unit-calculator>
                        </local-scheme>
                    </internal-cache-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
            <autostart>true</autostart>
        </distributed-scheme>

        <c:cqc-scheme>
            <c:scheme-name>cqc-scheme</c:scheme-name>
            <c:service-name>CQCService</c:service-name>
            <c:cache-ref>{underlying-cache-name}</c:cache-ref>
            <c:filter>{filter-query null}</c:filter>
            <c:key-only>{key-only false}</c:key-only>
        </c:cqc-scheme>


    </caching-schemes>
    </cache-config>

  {{ end }}

  environment.sh: |
      #!/bin/sh
      #
      # Copyright (c) 2017 Oracle. All rights reserved.
      #
      # This material is the confidential property of Oracle Corporation or its
      # licensors and may be used, reproduced, stored or transmitted only in
      # accordance with a valid Oracle license or sublicense agreement.
      #


      JAVAC_OPTIONS=-g

      ### configuration begin
      ECE_HOME={{ .Values.eceproperties.rootDir }}
      ### configuration end

      JAR_DIR=$ECE_HOME/lib
      CONFIG_DIR=$ECE_HOME/config

      #
      # SDK directories
      #
      SDK_SOURCE_DIR=$SDK_SCRIPT_DIR/../source
      SDK_CONFIG_DIR=$SDK_SCRIPT_DIR/../config
      SDK_LOG_DIR=$SDK_SCRIPT_DIR/../logs
      SDK_DIRS=$SDK_SOURCE_DIR:\
      $SDK_CONFIG_DIR

      #
      # OSDT Jars
      #
      OSDT_JARS=$JAR_DIR/osdt_cert.jar:\
      $JAR_DIR/osdt_core.jar

      #
      # Third party libraries
      #
      SPRING_BEANS=`ls $JAR_DIR/spring-beans-5.3.20.jar`
      SPRING_CORE=`ls $JAR_DIR/spring-core-5.3.20.jar`
      SPRING_CONTEXT=`ls $JAR_DIR/spring-context-5.3.20.jar`
      SPRING_EXP=`ls $JAR_DIR/spring-expression-5.3.20.jar`
      SPRING_AOP=`ls $JAR_DIR/spring-aop-5.3.20.jar`
      SPRING_WEB=`ls $JAR_DIR/spring-web-5.3.20.jar`
      SPRING_WEBFLUX=`ls $JAR_DIR/spring-webflux-5.3.20.jar`
      SPRING_JDBC=$JAR_DIR/spring-jdbc-5.3.20.jar:\
      $JAR_DIR/ojdbc8.jar

      SPRING_JARS=$JAR_DIR/spring-asm-4.2.4.RELEASE.jar:\
      $SPRING_BEANS:\
      $SPRING_CORE:\
      $SPRING_CONTEXT:\
      $SPRING_EXP:\
      $SPRING_AOP:\
      $SPRING_WEBFLUX:\
      $SPRING_WEB

      APACHE_JARS=$JAR_DIR/log4j-api-2.17.1.jar:\
      $JAR_DIR/log4j-core-2.17.1.jar:\
      $JAR_DIR/log4j-1.2-api-2.17.1.jar:\
      $JAR_DIR/log4j-slf4j-impl-2.17.1.jar:\
      $JAR_DIR/commons-logging-1.2-f4fdecd.jar:\
      $JAR_DIR/commons-configuration2-2.8.0.jar:\
      $JAR_DIR/commons-collections4-4.4.jar:\
      $JAR_DIR/commons-beanutils-1.9.4.jar:\
      $JAR_DIR/commons-lang3-3.12.0.jar:\
      $JAR_DIR/commons-text-1.9.jar

      KAFKA_JARS=$JAR_DIR/kafka-clients-3.0.0.jar

      NOTIFICATION_CLIENT_JARS=$JAR_DIR/wlthint3client.jar
      MAIL_JARS=$JAR_DIR/mail-1.4.7.jar
      REACTIVE_JARS=$JAR_DIR/reactive-streams-1.0.2.jar
      GROOVY_JARS=$JAR_DIR/groovy-all-2.4.21.jar

      # Scala is used for service specification parsing (request extensibility):
      # - usage_request.spec
      SCALA_JARS=$JAR_DIR/scala-library-2.13.6.jar:\
      $JAR_DIR/scala-parser-combinators_2.13-2.1.0.jar

      # Tekelec is used for processing Diameter Requests and Answers
      TEKELEC_JARS=$JAR_DIR/slf4j-api-1.7.32.jar:\
      $JAR_DIR/disruptor-3.4.4.jar:\
      $JAR_DIR/xstream-1.4.19.jar:


      #
      # Oracle Coherence libraries
      #
      COHERENCE_JARS=$(echo $JAR_DIR/coherence*.jar | tr ' ' ':'):\
      $JAR_DIR/common-2.1.jar

      COHERENCE_WORK_JARS=$JAR_DIR/work-1.4.1.jar

      ECE_SDK_LOG4J=client-log4j2.xml
      #
      # CGBU BRM ECE libraries
      #
      PCM_VERSION=12.0.0.7.0
      PCM_EXT_VERSION=12.0.0.7.0

      ECE_CLIENT_JARS=$(echo $JAR_DIR/ece-*.jar | tr ' ' ':'):\
      $JAR_DIR/pcm-$PCM_VERSION.jar:\
      $JAR_DIR/pcmext-$PCM_EXT_VERSION.jar:\
      $JAR_DIR/oraclepki-12.0.0.5.0.jar

      MICROMETER_JARS=$JAR_DIR/micrometer-registry-prometheus-1.6.6.jar:\
      $JAR_DIR/micrometer-core-1.6.6.jar

      # SDK must be before config in classpath for log4j settings
      CLASSPATH=$SPRING_JARS:\
      $MICROMETER_JARS:\
      $SDK_DIRS:\
      $APACHE_JARS:\
      $NOTIFICATION_CLIENT_JARS:\
      $MAIL_JARS:\
      $COHERENCE_JARS:\
      $SCALA_JARS:\
      $TEKELEC_JARS:\
      $ECE_CLIENT_JARS:\
      $CONFIG_DIR:\
      $COHERENCE_WORK_JARS:\
      $KAFKA_JARS:\
      $REACTIVE_JARS:\
      $GROOVY_JARS:\
      $OSDT_JARS

  launcher.sh: |
      #!/bin/sh
      #
      # Copyright (c) 2012- 2013 Oracle. All rights reserved.
      #
      # This material is the confidential property of Oracle Corporation or its
      # licensors and may be used, reproduced, stored or transmitted only in
      # accordance with a valid Oracle license or sublicense agreement.
      #

      #set -x
      #
      # readlink -f  is not working on all UNIX plaftorm, so we provide our own version
      #
      _readlink() {

      TARGET_FILE=$1

      cd `dirname $TARGET_FILE`
      TARGET_FILE=`basename $TARGET_FILE`

      while [ -L "$TARGET_FILE" ]
      do
          TARGET_FILE=`readlink $TARGET_FILE`
          cd `dirname $TARGET_FILE`
          TARGET_FILE=`basename $TARGET_FILE`
      done

      PHYS_DIR=`pwd -P`
      RESULT=$PHYS_DIR/$TARGET_FILE
      echo $RESULT

      }
      SDK_SCRIPT_DIR=`_readlink $0 | xargs dirname`

      . $SDK_SCRIPT_DIR/environment.sh

      #
      # usage - print program synopsis
      #
      usage() {
          if [ $PRG_NAME -eq "launcher.sh" ]
          then
              echo "Usage: $PRG_NAME build|run sampleProgramName [params ...]"
          else
              echo "Usage: $PRG_NAME build|run"
          fi
          exit -1
          }

      #
      # build - build SampleUsageRequest
      #
      build() {
          CMD="javac $JAVAC_OPTIONS -cp $CLASSPATH $SDK_SOURCE_DIR/oracle/communication/brm/charging/sdk/$PROGRAM.java"
          echo "$CMD"
          $CMD
      }

      {{- if eq .Values.charging.secondaryCluster "true" }}
      {{ range $key, $value := .Values.charging.cluster.secondary }}
      {{- if eq $value.clusterName $.Values.charging.clusterName }}
      COH_WKA={{ $value.eceServiceName | quote }}
      {{- end }}
      {{ end }}
      {{- else }}
      COH_WKA={{ .Values.charging.cluster.primary.eceServiceName | quote }}
      {{- end }}

      COH_CLUSTER={{ .Values.charging.clusterName | quote }}

      #
      # run - run SampleUsageRequest
      #
      run() {
          OPTIONS="$OPTIONS -Dtangosol.coherence.override=charging-coherence-override-dev.xml \
      -Dtangosol.coherence.distributed.localstorage=false \
      -Dtangosol.pof.config=client-pof-config.xml \
      -Dtangosol.pof.config=charging-pof-config.xml \
      -Djava.net.preferIPv4Addresses=true \
      -DECE_SDK_LOG_FILE_PATH=${SDK_LOG_DIR}/$PROGRAM \
      -Dlog4j.configurationFile=$ECE_SDK_LOG4J \
      -Djava.security.auth.login.config=../../../oceceserver/config/coherence-jaas.config \
      -Dtangosol.coherence.security=false \
      -Dtangosol.coherence.security.keystore=@JMX_SECURITY@ \
      -Dtangosol.coherence.ssl.keystore=file:@SSL_KEYSTORE@ \
      -Dtangosol.coherence.security.permissions=../../../oceceserver/config/permissions.xml \
      -Dcom.sun.management.jmxremote.password.file=../../../oceceserver/config/jmxremote.password \
      -Dsecure.access.name=admin \
      -Dcom.sun.management.jmxremote.authenticate=false \
      -Duser=@USER_CLUSTER_SECURITY@ -Dpassword=@PASSWORD_CLUSTER_SECURITY@ \
      -Dtangosol.coherence.member=sdk -Dtangosol.coherence.wka=${COH_WKA} -Dcoherence.cluster=${COH_CLUSTER}"

      if [ "${FEDERATION_ENABLED}" = "true" ]; then
          if [ "${ECE_PERSISTENCE_ENABLED}" = "true" ]; then
             OPTIONS="$OPTIONS -Dcoherence.cacheconfig=charging-cache-config-persistence.xml"
          else
             OPTIONS="$OPTIONS -Dcoherence.cacheconfig=charging-cache-config.xml"
          fi
      fi

      CMD="java $OPTIONS -cp $CLASSPATH oracle.communication.brm.charging.sdk.$PROGRAM $REST_PARAMS"
      echo "--- $CMD ---"
      $CMD
      }

      runDebug() {
      OPTIONS="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -Xnoagent -Djava.compiler=NONE"
      run
      }
      #
      # main
      #
      PRG_NAME=$0
      COMMAND=$1
      PROGRAM=$2
      NARGS=$#
      REST_PARAMS=""

      if [ $NARGS -lt 2 ]
      then
          echo "$PRG_NAME: error: incorrect number of arguments ($NARGS)"
          usage
      fi

      case $COMMAND in
          "build") build
      	;;
          "run")
      	if [ $# -lt 2 ]; then
      	    echo
      	    echo "$PRG_NAME: $COMMAND need correct parameters"
      	    echo
      	    usage
      	fi
      	shift
      	shift
      	REST_PARAMS=$@
      	run
      	;;
          "runDebug" )
      	shift
      	shift
      	REST_PARAMS=$@
      	runDebug
      	;;
          "defaultrun")
      	build
      	run
      	;;
          *) usage
      	;;
      esac

  site-configuration.xml: |
      <config>
          <siteConfigurations
                  config-class="oracle.communication.brm.charging.monitor.configuration.internal.SiteConfigurations">
                  <siteConfigurationList config-class="java.util.ArrayList">
                  {{ if eq .Values.charging.isFederation "true" }}
                  {{ range $key, $sites := .Values.charging.siteConfigurations }}
                  <siteConfiguration
                          config-class="oracle.communication.brm.charging.monitor.configuration.internal.SiteConfiguration"
                          name={{ $sites.name | quote }} >
                      <monitorAgentJmxConfigurations
                              config-class="oracle.communication.brm.charging.monitor.configuration.internal.MonitorAgentJmxConfigurations">
                          <monitorAgentJmxConfigurationList config-class="java.util.ArrayList">
                              {{ range $key, $site := $sites.monitorAgentJmxConfigurations }}
                              <monitorAgentJmxConfiguration
                                      config-class="oracle.communication.brm.charging.monitor.configuration.internal.MonitorAgentJmxConfiguration"
                                      name={{ $site.name | quote }}
                                      host={{ $site.host | quote }}
                                      jmxPort={{ $site.jmxPort | quote }}
                                      disableMonitor={{ $site.disableMonitor | quote }}>
                              </monitorAgentJmxConfiguration>
                              {{ end }}
                          </monitorAgentJmxConfigurationList>
                      </monitorAgentJmxConfigurations>
                  </siteConfiguration>
                  {{ end }}
                  {{ end }}
              </siteConfigurationList>
          </siteConfigurations>
      </config>

  subscriber-trace.xml: |
      <?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
      <config>
          <subscriberTraceConfig
              logMaxSubscribers = {{ .Values.subscriberTrace.logMaxSubscribers | quote }}
              logMaxSubscriberSessions = {{ .Values.subscriberTrace.logMaxSubscriberSessions | quote }}
              logExpiryWaitTime  = {{ .Values.subscriberTrace.logExpiryWaitTime | quote }}
              logCleanupInterval = {{ .Values.subscriberTrace.logCleanupInterval | quote }}
              logLevel = {{ .Values.subscriberTrace.logLevel | quote }}
              config-class="oracle.communication.brm.charging.subscribertrace.configuration.internal.SubscriberTraceConfig">

              <subscriberList config-class="java.util.ArrayList">
                  {{- range $key, $value := split " " (include "subscriberlist" .) }}
                  <subscriber id={{ $value | quote }} config-class="oracle.communication.brm.charging.subscribertrace.configuration.internal.SubscriberImpl"/>
                  {{- end }}
              </subscriberList>

              <componentLoggerList config-class="java.util.ArrayList">
                  <!-- Add specific logger name and log level to overwrite the out of the box default logger level
                  For example, the following configuration overwrite the logger named "oracle.communication.brm.charging.subscribertrace.configuration"
                  to have log level "ALL" and the logger named "oracle.communication.brm.charging.ratedevent.publisher to have"
                  log level "OFF".
                  The logger level can only be "ALL", "DEBUG", "ERROR", "FATAL", "INFO", "OFF", "TRACE", "WARN"
                  You can get the list of loggerName from the log4j2.xml file.

                  <componentLogger
                      loggerName="oracle.communication.brm.charging.subscribertrace.configuration"
                      loggerLevel="ALL"
                      config-class="oracle.communication.brm.charging.subscribertrace.configuration.internal.ComponentLoggerImpl"/>
                  <componentLogger
                      loggerName="oracle.communication.brm.charging.ratedevent.publisher"
                      loggerLevel="OFF"
                      config-class="oracle.communication.brm.charging.subscribertrace.configuration.internal.ComponentLoggerImpl"/>
                  -->
                  <!-- Uncomment this section to enable Charge Tracing
                  <componentLogger
                      loggerName="ALL"
                      loggerLevel="ERROR"
                      config-class="oracle.communication.brm.charging.subscribertrace.configuration.internal.ComponentLoggerImpl"/>
                  <componentLogger
                      loggerName="oracle.communication.brm.charging.rating.charge"
                      loggerLevel="DEBUG"
                      config-class="oracle.communication.brm.charging.subscribertrace.configuration.internal.ComponentLoggerImpl"/>
                  -->
                  <!-- Uncomment this section to enable Alteration Tracing
                  <componentLogger
                      loggerName="ALL"
                      loggerLevel="ERROR"
                      config-class="oracle.communication.brm.charging.subscribertrace.configuration.internal.ComponentLoggerImpl"/>
                  <componentLogger
                      loggerName="oracle.communication.brm.charging.rating.alteration"
                      loggerLevel="DEBUG"
                      config-class="oracle.communication.brm.charging.subscribertrace.configuration.internal.ComponentLoggerImpl"/>
                  -->
                  <!--  Uncomment this section to enable Distribution Tracing
                  <componentLogger
                      loggerName="ALL"
                      loggerLevel="ERROR"
                      config-class="oracle.communication.brm.charging.subscribertrace.configuration.internal.ComponentLoggerImpl"/>
                  <componentLogger
                      loggerName="oracle.communication.brm.charging.rating.distribution"
                      loggerLevel="DEBUG"
                      config-class="oracle.communication.brm.charging.subscribertrace.configuration.internal.ComponentLoggerImpl"/>
                  -->
              </componentLoggerList>

          </subscriberTraceConfig>
      </config>
